{"version":3,"sources":["./src/app/admin/admin.routing.module.ts","./src/app/admin/admin/admin.component.ts","./src/app/admin/admin/admin.component.html","./node_modules/@angular-material-components/color-picker/__ivy_ngcc__/fesm2015/angular-material-components-color-picker.js","./src/app/admin/admin.module.ts","./src/app/admin/search-account/search-account.component.ts","./src/app/admin/search-account/search-account.component.html","./src/app/admin/search-account/search-account.service.ts"],"names":[],"mappings":"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AACtB,IAAI,wDAAiB,YAAY,6DAAsB;AACvD,CAAC;AACD,oEAAoE;AACpE,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,+FAA+F,CAAC,2DAAoB,MAAM,4BAA4B,gBAAgB,2DAAoB,GAAG,4BAA4B,EAAE;AAChP,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,mBAAmB,2DAAoB;AACvC,IAAI,yDAAkB;AACtB,IAAI,wDAAiB,YAAY,6DAAsB;AACvD,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE,cAAc,EAAE,cAAc,EAAE;AAC7D,2BAA2B,EAAE,cAAc,EAAE,cAAc,EAAE;AAC7D,2BAA2B,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE;AAC7E,2BAA2B,EAAE,cAAc,EAAE,cAAc,EAAE,cAAc,EAAE;AAC7E;AACA;AACA;AACA,wCAAwC,UAAU,OAAO,UAAU,OAAO,SAAS;AACnF;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,6DAA6D,SAAS;AACtE;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,OAAO;AAC5D;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAeV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;;AAEA;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oFAAoF,iDAAiD;AACrI,mCAAmC,+DAAwB,EAAE,8HAA8H,iBAAiB,YAAY,+BAA+B,+HAA+H;AACtX,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,qHAAqH,uCAAuC,EAAE;AACvL,QAAQ,0DAAmB;AAC3B,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,yHAAyH,uCAAuC,EAAE;AAC3L,QAAQ,0DAAmB;AAC3B,KAAK;AACL,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,KAAK,EAAE,2BAA2B,qEAAqE,EAAE,4CAA4C,aAAa,gBAAgB,sCAAsC,aAAa,sBAAsB,kBAAkB,+CAA+C,cAAc,mBAAmB,uCAAuC,aAAa,sBAAsB,WAAW,sBAAsB;AACxc;AACA;AACA;AACA,oBAAoB,OAAO,oDAAM,EAAE;AACnC,aAAa,OAAO,mDAAK,EAAE;AAC3B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,+BAA+B,+DAAiB;AAChD;AACA;AACA,iBAAiB;AACjB,0DAA0D,aAAa,gBAAgB,sCAAsC,aAAa,sBAAsB,kBAAkB,+CAA+C,cAAc,mBAAmB,uCAAuC,aAAa,sBAAsB,WAAW;AACvV,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAKV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA,8BAA8B,6CAAO;AACrC;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kCAAkC,EAAE;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,wEAAwE,yCAAyC,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,UAAU;AAC5L,6BAA6B,+DAAwB,EAAE,uCAAuC,iBAAiB,YAAY,+BAA+B,EAAE;AAC5J;AACA;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK;AACL;AACA;AACA,oBAAoB,OAAO,oDAAM,EAAE;AACnC,aAAa,OAAO,mDAAK,E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W,EASV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA,kFAAkF,8CAA8C,+DAAwB,CAAC,oDAAa,GAAG;AACzK,kCAAkC,+DAAwB,EAAE,qFAAqF,wEAAiC,oMAAoM;AACtX,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,gGAAgG,gCAAgC,EAAE,6FAA6F,8BAA8B,EAAE;AACxR,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,gBAAgB;AACvB;AACA;AACA,KAAK,OAAO,oDAAM;AAClB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,oDAAa,EAAE,EAAE,EAAE,QAAQ,EAAE;AACnE,WAAW,EAMV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA,mBAAmB;AACnB;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,kCAAkC;AACxF,qBAAqB,gEAAyB,EAAE,k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BAAgB;AAChB;AACA;AACA,wBAAwB,oFAAqB;AAC7C;AACA;AACA;AACA,gBAAgB;AAChB;AACA,kBAAkB,qBAAqB;AACvC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,oCAAoC;AAC3D;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,qBAAqB,4BAA4B;AACjD;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,0BAA0B,6BAA6B;AACvD;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,+BAA+B,mEAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,4DAAI;AACxD,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,kCAAkC,mEAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ,mDAAK,mGAAmG,8DAAM;AACtH,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,qCAAqC,6DAAM;AAC3C,wEAAwE,+DAAQ;AAChF,SAAS;AACT,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,8CAA8C,+DAAwB,CAAC,kEAAgB,GAAG,+DAAwB,CAAC,6DAAc,GAAG,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,gBAAgB,+DAAwB,CAAC,iEAAqB,MAAM,+DAAwB,wCAAwC,+DAAwB,CAAC,wDAAQ,MAAM,+DAAwB,CAAC,8DAAuB,GAAG;AACrf,kCAAkC,+DAAwB,EAAE,mFAAmF,2GAA2G,YAAY,iDAAiD,uHAAuH,EAAE,wCAAwC;AACxd;AACA;AACA,KAAK,OAAO,kEAAS,EAAE;AACvB,KAAK,OAAO,6DAAO,EAAE;AACrB,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,qBAAqB;AAC1B,KAAK,OAAO,iEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAC9D,KAAK,gCAAgC,OAAO,oDAAM,iDAAiD,GAAG;AACtG,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9F,KAAK,OAAO,8DAAgB;AAC5B;AACA;AACA,oBAAoB,OAAO,oDAAM,qBAAqB;AACtD,oBAAoB,OAAO,oDAAM,qBAAqB;AACtD,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,eAAe,OAAO,mDAAK,EAAE;AAC7B,cAAc,OAAO,mDAAK,EAAE;AAC5B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,aAAa,OAAO,mDAAK,EAAE;AAC3B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,+BAA+B,+DAAiB;AAChD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,kEAAgB,EAAE,GAAG,OAAO,6DAAc,EAAE,GAAG,OAAO,oDAAa,EAAE,GAAG,qBAAqB,GAAG,OAAO,iEAAqB;AAClK,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B,uBAAuB,wDAAQ;AAC/B,aAAa,GAAG,GAAG,OAAO,8DAAuB,EAAE,EAAE,EAAE,GAAG;AAC1D,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,oDAAM;AACxB;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EA0HV;;AAED;AACA;AACA;AACA,cAAc,uHAAuH;AACrI;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAgBV;AACD,WAAW,EAAE;AACb;AACA,aAAa,gEAAiB;AAC9B,iBAAiB,gEAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,aAAa,4DAAa;AAC1B,iBAAiB,gEAAU;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA,gCAAgC,0DAAY;AAC5C;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB;AACA,oBAAoB;AACpB;AACA,eAAe,EAAE;AACjB,mCAAmC,kDAAY;AAC/C;AACA;AACA;AACA,0BAA0B,yDAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,yBAAyB;AAC7C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,yBAAyB,oFAAqB;AAC9C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,iEAAiE,iEAAU;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,0CAA0C,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,0EAAmB,MAAM,+DAAwB,wBAAwB,+DAAwB,gBAAgB;AAC3S,8BAA8B,+DAAwB,EAAE,kKAAkK;AAC1N,QAAQ,wDAAiB,4EAA4E,0CAA0C,EAAE,yEAAyE,wBAAwB,EAAE,qEAAqE,sBAAsB,EAAE,iFAAiF,+BAA+B,EAAE;AACnc,KAA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","file":"admin-admin-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { SearchAccountComponent } from './search-account/search-account.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    // component: SearchAccountComponent,\r\n    children:[\r\n      {\r\n        path:'ChangeConfig',\r\n        component: AdminComponent\r\n      },\r\n      {\r\n        path:'SearchAccount',\r\n        component: SearchAccountComponent\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AdminRoutingModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { StatusDTO } from 'src/app/shared/Models/Models';\r\nimport { StepCompletionStatusComponent } from 'src/app/shared/step-completion-status/step-completion-status.component';\r\nimport { Admin } from './admin.model';\r\nimport { AdminService } from './admin.service';\r\nimport {Router} from \"@angular/router\"\r\nimport { SessionDetailSerice } from 'src/app/core/services/sessionDetail.service';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-admin',\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.scss']\r\n})\r\nexport class AdminComponent implements OnInit {\r\n  public color: ThemePalette = 'primary';\r\n  public fileName: string = ''\r\n\r\n  ConfigForm: FormGroup;\r\n  constructor(private router: Router, public adminService : AdminService, private dialog: MatDialog, private sessionService : SessionDetailSerice) {\r\n\r\n    this.ConfigForm = new FormGroup({\r\n      \"colorpicker\": new FormControl(null),\r\n      \"logoFile\": new FormControl(null),\r\n      \"projectTitle\": new FormControl(null),\r\n      \"clientNo\": new FormControl(\"\"),\r\n      \"authKey\": new FormControl(\"\"),\r\n      \"promoCode\": new FormControl(\"\"),\r\n      \"statementTemplateId\": new FormControl(\"\"),\r\n      \"apiEndPoint\": new FormControl(\"\"),\r\n      \"objectQueryEndPoint\": new FormControl(\"\"),\r\n      \"adminToolEndPoint\": new FormControl(\"\"),\r\n    })\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.adminService.Get().subscribe((result)=>{\r\n      this.initForm(result);\r\n    });\r\n  }\r\n  initForm(result:any) {\r\n     this.ConfigForm = new FormGroup({\r\n      \"colorpicker\": new FormControl(null),\r\n      \"logoFile\": new FormControl(null),\r\n      \"projectTitle\": new FormControl(result.projectTitle),\r\n      \"clientNo\": new FormControl(result.client_no),\r\n      \"authKey\": new FormControl(\"\"),\r\n      \"promoCode\": new FormControl(result.promoCode),\r\n      \"statementTemplateId\": new FormControl(result.statementTemplateId),\r\n      \"apiEndPoint\": new FormControl(result.apiEndPoint),\r\n      \"objectQueryEndPoint\": new FormControl(result.objectQueryEndPoint),\r\n      \"adminToolEndPoint\": new FormControl(result.adminToolEndPoint),\r\n    })\r\n  }\r\n\r\n  handleFileInput(event:any) {\r\n    this.ConfigForm.controls['logoFile'].setValue(event.target.files[0]);\r\n    this.fileName = event.target.files[0].name;\r\n}\r\n  onSubmit() {\r\n\r\n    console.log(this.ConfigForm);    \r\n    let obj = {\r\n      color: '',\r\n      logoFile: null,\r\n      projectTitle: '',\r\n      client_no:'',\r\n      authKey: '',\r\n      promoCode:'',\r\n      statementTemplateId: '',\r\n    } as Admin;\r\n\r\n    debugger;\r\n\r\n    if(this.ConfigForm.controls.colorpicker && this.ConfigForm.controls.colorpicker.value && this.ConfigForm.controls.colorpicker.value.hex){\r\n      obj.color = this.ConfigForm.controls.colorpicker.value.hex;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.logoFile && this.ConfigForm.controls.logoFile.value){\r\n      obj.logoFile = this.ConfigForm.controls.logoFile.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.projectTitle && this.ConfigForm.controls.projectTitle.value){\r\n      obj.projectTitle = this.ConfigForm.controls.projectTitle.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.clientNo && this.ConfigForm.controls.clientNo.value){\r\n      obj.client_no = this.ConfigForm.controls.clientNo.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.authKey && this.ConfigForm.controls.authKey.value){\r\n      obj.authKey = this.ConfigForm.controls.authKey.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.promoCode && this.ConfigForm.controls.promoCode.value){\r\n      obj.promoCode = this.ConfigForm.controls.promoCode.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.statementTemplateId && this.ConfigForm.controls.statementTemplateId.value){\r\n      obj.statementTemplateId = this.ConfigForm.controls.statementTemplateId.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.apiEndPoint && this.ConfigForm.controls.apiEndPoint.value){\r\n      obj.apiEndPoint = this.ConfigForm.controls.apiEndPoint.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.objectQueryEndPoint && this.ConfigForm.controls.objectQueryEndPoint.value){\r\n      obj.objectQueryEndPoint = this.ConfigForm.controls.objectQueryEndPoint.value;\r\n    }\r\n\r\n    if(this.ConfigForm.controls.adminToolEndPoint && this.ConfigForm.controls.adminToolEndPoint.value){\r\n      obj.adminToolEndPoint = this.ConfigForm.controls.adminToolEndPoint.value;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"color\", obj.color);\r\n    formData.append(\"logoFile\", obj.logoFile);\r\n    formData.append(\"projectTitle\", obj.projectTitle);\r\n    formData.append(\"client_no\", obj.client_no);\r\n    formData.append(\"authKey\", obj.authKey);\r\n    formData.append(\"promoCode\", obj.promoCode);\r\n    formData.append(\"statementTemplateId\", obj.statementTemplateId);\r\n    formData.append(\"apiEndPoint\", obj.apiEndPoint);\r\n    formData.append(\"objectQueryEndPoint\", obj.objectQueryEndPoint);\r\n    formData.append(\"adminToolEndPoint\", obj.adminToolEndPoint);\r\n\r\n    this.adminService.Post(formData).subscribe((result)=>{\r\n    \r\n      if(result){\r\n        const adminModel : Admin = {} as Admin;\r\n        adminModel.color = result.color && result.color != '' ? result.color : '';\r\n        adminModel.projectTitle = result.projectTitle && result.projectTitle != '' ? result.projectTitle : '';\r\n        adminModel.logoFilePath = result.logoFilePath && result.logoFilePath != '' ? result.logoFilePath : '';\r\n\r\n\r\n        localStorage.setItem(\"color\", adminModel.color);\r\n        localStorage.setItem(\"projectTitle\", adminModel.projectTitle);\r\n        localStorage.setItem(\"logoFilePath\", adminModel.logoFilePath);\r\n        this.sessionService.onthemeChange();\r\n        this.successfull();\r\n    }\r\n    });\r\n   \r\n  }\r\n\r\n  successfull(){\r\n    let statusData: StatusDTO = {\r\n      title: \"Project Configuration\",\r\n      details: \"Configurations have been successfully updated\",\r\n      stepSuccessful: true\r\n  }\r\n\r\n  let ref = this.dialog.open(StepCompletionStatusComponent,\r\n    { height: '45vh', width: '40vw', data: statusData });\r\n  ref.afterClosed().subscribe(()=>{\r\n      // this.router.navigate(['/SelectPackage']);\r\n      window.location.reload();\r\n  });  \r\n  }\r\n}\r\n","\r\n<app-header\r\n></app-header>\r\n<div class=\"card main-screen\">\r\n    <div class=\"card-header\">\r\n        Configurations\r\n    </div>\r\n    <form [formGroup]=\"ConfigForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-container\">\r\n            <div class=\"selection-fields\">\r\n                <div class=\"form-label\">Client No</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"Client No\" class=\"input-text\"  formControlName=\"clientNo\">\r\n                </mat-form-field>\r\n                \r\n                <div class=\"form-label\">Auth Key</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"Auth Key\" class=\"input-text\"  formControlName=\"authKey\">\r\n                </mat-form-field>\r\n\r\n                <div class=\"form-label\">Promo Code</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"Promo Code\" class=\"input-text\"  formControlName=\"promoCode\">\r\n                </mat-form-field>\r\n\r\n                <div class=\"form-label\">Project Title</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"Project title\" class=\"input-text\"  formControlName=\"projectTitle\">\r\n                </mat-form-field>\r\n                \r\n                <div class=\"form-label\">Statement Template Id</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"Statement Template Id\" class=\"input-text\"  formControlName=\"statementTemplateId\">\r\n                </mat-form-field>\r\n\r\n                <div class=\"form-label\">API End Point</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"API End Point\" class=\"input-text\"  formControlName=\"apiEndPoint\">\r\n                </mat-form-field>\r\n\r\n                <div class=\"form-label\">Object Query End point</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"Object Query End point\" class=\"input-text\"  formControlName=\"objectQueryEndPoint\">\r\n                </mat-form-field>\r\n\r\n                <div class=\"form-label\">Admin Tools End Point</div>\r\n                <mat-form-field class=\"custom-mat-input\" appearance=\"outline\">\r\n                    <input matInput placeholder=\"Admin Tools End Point\" class=\"input-text\"  formControlName=\"adminToolEndPoint\">\r\n                </mat-form-field>\r\n\r\n                <div class=\"form-label\">Theme Primary Color</div>\r\n                <mat-form-field>\r\n                    <input matInput placeholder=\"Pick Color\" [ngxMatColorPicker]=\"picker\" formControlName=\"colorpicker\">\r\n                    <ngx-mat-color-toggle matSuffix [for]=\"picker\"></ngx-mat-color-toggle>\r\n                    <ngx-mat-color-picker #picker [color]=\"color\"></ngx-mat-color-picker>\r\n                </mat-form-field>\r\n\r\n                \r\n                <label for=\"file-upload\" class=\"custom-file-upload cancel-button\" style=\"display: flex; align-items: center;\">\r\n                    <span>\r\n                        <!-- <img src=\"../../../assets/cloud-upload.png\" alt=\"Cloud Upload\" style=\"width: 20px; height: 20px; padding-right: 10px;\"> -->\r\n                        <mat-icon class=\"cloud-upload-icon\">cloud_upload</mat-icon>\r\n                    </span> Upload Logo\r\n\r\n                </label>\r\n                <input id=\"file-upload\" type=\"file\" (change)=\"handleFileInput($event)\" accept=\"image/png, image/gif, image/jpeg\"/>\r\n                <div class=\"fileName m-field\" [innerHTML]=\"fileName\"></div>\r\n                \r\n                <!--\r\n                <form action=\"#\">\r\n                    <div class=\"input-file-container\">  \r\n                      <input class=\"input-file\" id=\"my-file\" type=\"file\" (change)=\"handleFileInput($event)\" accept=\"image/png, image/gif, image/jpeg\">\r\n                      <label tabindex=\"0\" for=\"my-file\" class=\"input-file-trigger\">Select a file</label>\r\n                    </div>\r\n                    <p class=\"file-return\">Selected file: </p>\r\n                </form>\r\n                -->\r\n\r\n            </div>\r\n\r\n\r\n            <div class=\"btn-container\">\r\n                <button mat-stroked-button color=\"primary\" class=\"confirm-button\" type=\"button\" (click)=\"this.onSubmit()\">Submit</button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>","import { ComponentPortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { EventEmitter, Component, ViewEncapsulation, Output, Input, Directive, NgZone, Injectable, InjectionToken, ChangeDetectionStrategy, ElementRef, ViewChild, Optional, Inject, ViewContainerRef, forwardRef, ChangeDetectorRef, HostListener, NgModule } from '@angular/core';\nimport { FormGroup, FormControl, Validators, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MAT_INPUT_VALUE_ACCESSOR, MatInputModule } from '@angular/material/input';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { takeUntil, debounceTime, distinctUntilChanged, take, filter } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { mixinColor } from '@angular/material/core';\nimport { matDatepickerAnimations } from '@angular/material/datepicker';\nimport { MatFormField } from '@angular/material/form-field';\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/helpers/color-helpers.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/material/form-field';\nimport * as ɵngcc3 from '@angular/material/input';\nimport * as ɵngcc4 from '@angular/material/button';\nimport * as ɵngcc5 from '@angular/common';\nimport * as ɵngcc6 from '@angular/material/dialog';\nimport * as ɵngcc7 from '@angular/cdk/overlay';\nimport * as ɵngcc8 from '@angular/cdk/bidi';\nimport * as ɵngcc9 from '@angular/material/icon';\n\nconst _c0 = function (a0) { return { \"active\": a0 }; };\nfunction NgxMatColorCollectionComponent_button_1_Template(rf, ctx) { if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxMatColorCollectionComponent_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const c_r2 = ctx.$implicit; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.select(c_r2); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"background-color\", c_r2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r0.selectedColor === c_r2));\n} }\nfunction NgxMatColorCollectionComponent_button_3_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxMatColorCollectionComponent_button_3_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const c_r5 = ctx.$implicit; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.select(c_r5); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const c_r5 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"background-color\", c_r5);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx_r1.selectedColor === c_r5));\n} }\nconst _c1 = [\"button\"];\nconst trimLeft = /^\\s+/;\r\n/** @type {?} */\r\nconst trimRight = /\\s+$/;\r\n/** @type {?} */\r\nconst tinyCounter = 0;\r\n/** @type {?} */\r\nconst mathRound = Math.round;\r\n/** @type {?} */\r\nconst mathMin = Math.min;\r\n/** @type {?} */\r\nconst mathMax = Math.max;\r\n/** @type {?} */\r\nconst mathRandom = Math.random;\r\n/** @type {?} */\r\nconst NUMERIC_REGEX = /[^0-9]/g;\r\n/** @type {?} */\r\nconst MAX_RGB = 255;\r\n/** @type {?} */\r\nconst MIN_RGB = 0;\r\n/**\r\n * List basic colors\r\n * @type {?}\r\n */\r\nconst BASIC_COLORS = [\"#ffffff\", \"#ffff00\", \"#ff00ff\", \"#ff0000\",\r\n    \"#c0c0c0\", \"#808080\", \"#808000\", \"#800080\",\r\n    \"#800000\", \"#00ffff\", \"#00ff00\", \"#008080\",\r\n    \"#008000\", \"#0000ff\", \"#000080\", \"#000000\"\r\n];\r\n/**\r\n * Get color at position\r\n * @param {?} ctx\r\n * @param {?} x\r\n * @param {?} y\r\n * @return {?}\r\n */\r\nfunction getColorAtPosition(ctx, x, y) {\r\n    /** @type {?} */\r\n    const imageData = ctx.getImageData(x, y, 1, 1).data;\r\n    return { r: imageData[0], g: imageData[1], b: imageData[2] };\r\n}\r\n// `rgbaToHex`\r\n// Converts an RGBA color plus alpha transparency to hex\r\n// Assumes r, g, b are contained in the set [0, 255] and\r\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\r\n/**\r\n * @param {?} r\r\n * @param {?} g\r\n * @param {?} b\r\n * @param {?} a\r\n * @param {?=} allow4Char\r\n * @return {?}\r\n */\r\nfunction rgbaToHex(r, g, b, a, allow4Char) {\r\n    /** @type {?} */\r\n    var hex = [\r\n        pad2(mathRound(r).toString(16)),\r\n        pad2(mathRound(g).toString(16)),\r\n        pad2(mathRound(b).toString(16)),\r\n        pad2(convertDecimalToHex(a))\r\n    ];\r\n    // Return a 4 character hex if possible\r\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\r\n    }\r\n    return hex.join(\"\");\r\n}\r\n// Force a hex value to have 2 characters\r\n/**\r\n * @param {?} c\r\n * @return {?}\r\n */\r\nfunction pad2(c) {\r\n    return c.length == 1 ? '0' + c : '' + c;\r\n}\r\n// Converts a decimal to a hex value\r\n/**\r\n * @param {?} d\r\n * @return {?}\r\n */\r\nfunction convertDecimalToHex(d) {\r\n    return Math.round(parseFloat(d) * 255).toString(16);\r\n}\r\n// Converts a hex value to a decimal\r\n/**\r\n * @param {?} h\r\n * @return {?}\r\n */\r\nfunction convertHexToDecimal(h) {\r\n    return (parseIntFromHex(h) / 255);\r\n}\r\n// Parse a base-16 hex value into a base-10 integer\r\n/**\r\n * @param {?} val\r\n * @return {?}\r\n */\r\nfunction parseIntFromHex(val) {\r\n    return parseInt(val, 16);\r\n}\r\n// `rgbToHex`\r\n// Converts an RGB color to hex\r\n// Assumes r, g, and b are contained in the set [0, 255]\r\n// Returns a 3 or 6 character hex\r\n/**\r\n * @param {?} r\r\n * @param {?} g\r\n * @param {?} b\r\n * @param {?=} allow3Char\r\n * @return {?}\r\n */\r\nfunction rgbToHex(r, g, b, allow3Char) {\r\n    /** @type {?} */\r\n    var hex = [\r\n        pad2(mathRound(r).toString(16)),\r\n        pad2(mathRound(g).toString(16)),\r\n        pad2(mathRound(b).toString(16))\r\n    ];\r\n    // Return a 3 character hex if possible\r\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n    }\r\n    return hex.join(\"\");\r\n}\r\n// Actual matching.\r\n// Parentheses and commas are optional, but not required.\r\n// Whitespace can take the place of commas or opening parent\r\n/** @type {?} */\r\nconst CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n/** @type {?} */\r\nconst CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n/** @type {?} */\r\nconst CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n/** @type {?} */\r\nconst PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n/** @type {?} */\r\nconst PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n/** @type {?} */\r\nconst matchers = {\r\n    CSS_UNIT: new RegExp(CSS_UNIT),\r\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n    hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n};\r\n// `stringInputToObject`\r\n// Permissive string parsing.  Take in a number of formats, and output an object\r\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n/**\r\n * @param {?} color\r\n * @return {?}\r\n */\r\nfunction stringInputToObject(color) {\r\n    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();\r\n    // Try to match string input using regular expressions.\r\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n    // Just return an object and let the conversion functions handle that.\r\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n    /** @type {?} */\r\n    let match;\r\n    /** @type {?} */\r\n    let obj;\r\n    if ((match = matchers.rgb.exec(color))) {\r\n        return { r: match[1], g: match[2], b: match[3], a: 1 };\r\n    }\r\n    if ((match = matchers.rgba.exec(color))) {\r\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n    }\r\n    if ((match = matchers.hex8.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            a: convertHexToDecimal(match[4]),\r\n        };\r\n    }\r\n    if ((match = matchers.hex6.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1]),\r\n            g: parseIntFromHex(match[2]),\r\n            b: parseIntFromHex(match[3]),\r\n            a: 1\r\n        };\r\n    }\r\n    if ((match = matchers.hex4.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + '' + match[1]),\r\n            g: parseIntFromHex(match[2] + '' + match[2]),\r\n            b: parseIntFromHex(match[3] + '' + match[3]),\r\n            a: convertHexToDecimal(match[4] + '' + match[4]),\r\n        };\r\n    }\r\n    if ((match = matchers.hex3.exec(color))) {\r\n        return {\r\n            r: parseIntFromHex(match[1] + '' + match[1]),\r\n            g: parseIntFromHex(match[2] + '' + match[2]),\r\n            b: parseIntFromHex(match[3] + '' + match[3]),\r\n            a: 1\r\n        };\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @param {?} provider\r\n * @return {?}\r\n */\r\nfunction createMissingDateImplError(provider) {\r\n    return Error(`NgxMatColorPicker: No provider found for ${provider}. You must define MAT_COLOR_FORMATS in your module`);\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/helpers/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/color.model.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass Color {\r\n    /**\r\n     * @param {?} _r\r\n     * @param {?} _g\r\n     * @param {?} _b\r\n     * @param {?=} _a\r\n     */\r\n    constructor(_r, _g, _b, _a) {\r\n        this.r = _r > MAX_RGB ? MAX_RGB : _r;\r\n        this.g = _g > MAX_RGB ? MAX_RGB : _g;\r\n        this.b = _b > MAX_RGB ? MAX_RGB : _b;\r\n        if (_a != null) {\r\n            this.a = _a > 1 ? 1 : _a;\r\n        }\r\n        else {\r\n            this.a = 1;\r\n        }\r\n        this.roundA = Math.round(this.a);\r\n        this.hex = rgbToHex(this.r, this.g, this.b);\r\n        this.rgba = this.toRgba();\r\n    }\r\n    /**\r\n     * @param {?=} allow3Char\r\n     * @return {?}\r\n     */\r\n    toHex(allow3Char) {\r\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toRgba() {\r\n        return `rgba(${this.r},${this.g},${this.b},${this.a})`;\r\n    }\r\n    /**\r\n     * @param {?=} allow3Char\r\n     * @return {?}\r\n     */\r\n    toHexString(allow3Char) {\r\n        return '#' + this.toHex(allow3Char);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toRgbString() {\r\n        return (this.a === 1) ?\r\n            \"rgb(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \")\" :\r\n            \"rgba(\" + Math.round(this.r) + \", \" + Math.round(this.g) + \", \" + Math.round(this.b) + \", \" + this.roundA + \")\";\r\n    }\r\n    /**\r\n     * @param {?} allow4Char\r\n     * @return {?}\r\n     */\r\n    toHex8(allow4Char) {\r\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\r\n    }\r\n    /**\r\n     * @param {?=} allow4Char\r\n     * @return {?}\r\n     */\r\n    toHex8String(allow4Char) {\r\n        return '#' + this.toHex8(allow4Char);\r\n    }\r\n    /**\r\n     * @param {?} format\r\n     * @return {?}\r\n     */\r\n    toString(format) {\r\n        /** @type {?} */\r\n        let formatSet = !!format;\r\n        /** @type {?} */\r\n        let formattedString;\r\n        /** @type {?} */\r\n        let hasAlpha = this.a < 1 && this.a >= 0;\r\n        /** @type {?} */\r\n        let needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\"\r\n            || format === \"hex3\" || format === \"hex4\" || format === \"hex8\");\r\n        if (needsAlphaFormat) {\r\n            return this.toRgbString();\r\n        }\r\n        if (format === \"rgb\") {\r\n            formattedString = this.toRgbString();\r\n        }\r\n        if (format === \"hex\" || format === \"hex6\") {\r\n            formattedString = this.toHexString();\r\n        }\r\n        if (format === \"hex3\") {\r\n            formattedString = this.toHexString(true);\r\n        }\r\n        if (format === \"hex4\") {\r\n            formattedString = this.toHex8String(true);\r\n        }\r\n        if (format === \"hex8\") {\r\n            formattedString = this.toHex8String();\r\n        }\r\n        return formattedString || this.toHexString();\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    Color.prototype.r;\r\n    /** @type {?} */\r\n    Color.prototype.g;\r\n    /** @type {?} */\r\n    Color.prototype.b;\r\n    /** @type {?} */\r\n    Color.prototype.a;\r\n    /** @type {?} */\r\n    Color.prototype.roundA;\r\n    /** @type {?} */\r\n    Color.prototype.hex;\r\n    /** @type {?} */\r\n    Color.prototype.rgba;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/color-input-format.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/models/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-palette/color-palette.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxMatColorPaletteComponent {\r\n    constructor() {\r\n        this.colorChanged = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    handleColorChanged(color) {\r\n        this.colorChanged.emit(color);\r\n    }\r\n}\nNgxMatColorPaletteComponent.ɵfac = function NgxMatColorPaletteComponent_Factory(t) { return new (t || NgxMatColorPaletteComponent)(); };\nNgxMatColorPaletteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatColorPaletteComponent, selectors: [[\"ngx-mat-color-palette\"]], hostAttrs: [1, \"ngx-mat-color-palette\"], inputs: { color: \"color\" }, outputs: { colorChanged: \"colorChanged\" }, decls: 2, vars: 2, consts: [[3, \"color\", \"colorChanged\"]], template: function NgxMatColorPaletteComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-mat-color-canvas\", 0);\n        ɵngcc0.ɵɵlistener(\"colorChanged\", function NgxMatColorPaletteComponent_Template_ngx_mat_color_canvas_colorChanged_0_listener($event) { return ctx.handleColorChanged($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(1, \"ngx-mat-color-collection\", 0);\n        ɵngcc0.ɵɵlistener(\"colorChanged\", function NgxMatColorPaletteComponent_Template_ngx_mat_color_collection_colorChanged_1_listener($event) { return ctx.handleColorChanged($event); });\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"color\", ctx.color);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"color\", ctx.color);\n    } }, directives: function () { return [NgxMatColorCanvasComponent, NgxMatColorCollectionComponent]; }, styles: [\".ngx-mat-color-palette .actions{display:flex;margin-top:10px}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;flex-direction:column;width:40px}\"], encapsulation: 2 });\r\n/** @nocollapse */\r\nNgxMatColorPaletteComponent.ctorParameters = () => [];\r\nNgxMatColorPaletteComponent.propDecorators = {\r\n    colorChanged: [{ type: Output }],\r\n    color: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorPaletteComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-color-palette',\n                template: \"<ngx-mat-color-canvas (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-canvas>\\r\\n<ngx-mat-color-collection (colorChanged)=\\\"handleColorChanged($event)\\\" [color]=\\\"color\\\"></ngx-mat-color-collection>\",\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    'class': 'ngx-mat-color-palette'\n                },\n                styles: [\".ngx-mat-color-palette .actions{display:flex;margin-top:10px}.ngx-mat-color-palette .actions .left{display:flex;flex-direction:column;margin-right:15px}.ngx-mat-color-palette .actions .left .preview{flex:2 1 auto;margin-bottom:10px}.ngx-mat-color-palette .actions .right{display:flex;flex-direction:column;width:40px}\"]\n            }]\n    }], function () { return []; }, { colorChanged: [{\n            type: Output\n        }], color: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /** @type {?} */\r\n    NgxMatColorPaletteComponent.prototype.colorChanged;\r\n    /** @type {?} */\r\n    NgxMatColorPaletteComponent.prototype.color;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-canvas/base-color-canvas.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass NgxMatBaseColorCanvas {\r\n    /**\r\n     * @param {?} zone\r\n     * @param {?} elementId\r\n     */\r\n    constructor(zone, elementId) {\r\n        this.zone = zone;\r\n        this.colorChanged = new EventEmitter();\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.drag = false;\r\n        this._destroyed = new Subject();\r\n        this.elementId = elementId;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this.canvas = (/** @type {?} */ (document.getElementById(this.elementId)));\r\n        this.ctx = this.canvas.getContext('2d');\r\n        this.width = this.canvas.width;\r\n        this.height = this.canvas.height;\r\n        this.draw();\r\n    }\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    draw() {\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        this.ctx.rect(0, 0, this.width, this.height);\r\n        this.fillGradient();\r\n        if (this.y != 0) {\r\n            this.redrawIndicator(this.x, this.y);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    onMousedown(e) {\r\n        this.drag = true;\r\n        this.changeColor(e);\r\n        this.zone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this.canvas.addEventListener('mousemove', this.onMousemove.bind(this));\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    onMousemove(e) {\r\n        if (this.drag) {\r\n            this.zone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this.changeColor(e);\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    onMouseup(e) {\r\n        this.drag = false;\r\n        this.canvas.removeEventListener('mousemove', this.onMousemove);\r\n    }\r\n    /**\r\n     * @param {?} color\r\n     * @return {?}\r\n     */\r\n    emitChange(color) {\r\n        this.colorChanged.emit(color);\r\n    }\r\n}\nNgxMatBaseColorCanvas.ɵfac = function NgxMatBaseColorCanvas_Factory(t) { return new (t || NgxMatBaseColorCanvas)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(String)); };\nNgxMatBaseColorCanvas.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxMatBaseColorCanvas, inputs: { color: \"color\" }, outputs: { colorChanged: \"colorChanged\" } });\r\n/** @nocollapse */\r\nNgxMatBaseColorCanvas.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: String }\r\n];\r\nNgxMatBaseColorCanvas.propDecorators = {\r\n    colorChanged: [{ type: Output }],\r\n    color: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatBaseColorCanvas, [{\n        type: Directive,\n        args: [{}]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: String }]; }, { colorChanged: [{\n            type: Output\n        }], color: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.colorChanged;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.color;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.canvas;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.elementId;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.ctx;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.width;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.height;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.x;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.y;\r\n    /** @type {?} */\r\n    NgxMatBaseColorCanvas.prototype.drag;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    NgxMatBaseColorCanvas.prototype._destroyed;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    NgxMatBaseColorCanvas.prototype.zone;\r\n    /**\r\n     * @abstract\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    NgxMatBaseColorCanvas.prototype.changeColor = function (e) { };\r\n    /**\r\n     * @abstract\r\n     * @return {?}\r\n     */\r\n    NgxMatBaseColorCanvas.prototype.fillGradient = function () { };\r\n    /**\r\n     * @abstract\r\n     * @param {?} x\r\n     * @param {?} y\r\n     * @return {?}\r\n     */\r\n    NgxMatBaseColorCanvas.prototype.redrawIndicator = function (x, y) { };\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-canvas/color-canvas.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst RADIUS_NOB = 5;\r\nclass NgxMatColorCanvasComponent extends NgxMatBaseColorCanvas {\r\n    /**\r\n     * @param {?} zone\r\n     */\r\n    constructor(zone) {\r\n        super(zone, 'color-block');\r\n        this.zone = zone;\r\n        this._resetBaseColor = true;\r\n        this.formGroup = new FormGroup({\r\n            r: new FormControl(null, [Validators.required]),\r\n            g: new FormControl(null, [Validators.required]),\r\n            b: new FormControl(null, [Validators.required]),\r\n            a: new FormControl(null, [Validators.required]),\r\n            hex: new FormControl(null, [Validators.required, Validators.pattern(matchers.hex6)]),\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get rCtrl() {\r\n        return this.formGroup.get('r');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get gCtrl() {\r\n        return this.formGroup.get('g');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get bCtrl() {\r\n        return this.formGroup.get('b');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get aCtrl() {\r\n        return this.formGroup.get('a');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get hexCtrl() {\r\n        return this.formGroup.get('hex');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        /** @type {?} */\r\n        const rgbaCtrl$ = merge(this.rCtrl.valueChanges, this.gCtrl.valueChanges, this.bCtrl.valueChanges, this.aCtrl.valueChanges);\r\n        rgbaCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400))\r\n            .subscribe((/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        _ => {\r\n            /** @type {?} */\r\n            const color = new Color(Number(this.rCtrl.value), Number(this.gCtrl.value), Number(this.bCtrl.value), Number(this.aCtrl.value));\r\n            this.emitChange(color);\r\n        }));\r\n        /** @type {?} */\r\n        const hexCtrl$ = this.hexCtrl.valueChanges;\r\n        hexCtrl$.pipe(takeUntil(this._destroyed), debounceTime(400), distinctUntilChanged())\r\n            .subscribe((/**\r\n         * @param {?} hex\r\n         * @return {?}\r\n         */\r\n        hex => {\r\n            /** @type {?} */\r\n            const obj = stringInputToObject(hex);\r\n            if (obj != null) {\r\n                /** @type {?} */\r\n                const color = new Color(obj.r, obj.g, obj.b, obj.a);\r\n                this.emitChange(color);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes.color && changes.color.currentValue) {\r\n            this.updateForm(changes.color.currentValue);\r\n            if (this._resetBaseColor) {\r\n                this._baseColor = changes.color.currentValue;\r\n            }\r\n            this._resetBaseColor = true;\r\n            if (!changes.color.firstChange) {\r\n                this.draw();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} val\r\n     * @return {?}\r\n     */\r\n    updateForm(val) {\r\n        /** @type {?} */\r\n        const config = { emitEvent: false };\r\n        this.rCtrl.setValue(val.r, config);\r\n        this.gCtrl.setValue(val.g, config);\r\n        this.bCtrl.setValue(val.b, config);\r\n        this.aCtrl.setValue(val.a, config);\r\n        this.hexCtrl.setValue(val.hex, config);\r\n    }\r\n    /**\r\n     * @param {?} x\r\n     * @param {?} y\r\n     * @return {?}\r\n     */\r\n    redrawIndicator(x, y) {\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = 'white';\r\n        this.ctx.arc(x, y, RADIUS_NOB, 0, 2 * Math.PI, false);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    fillGradient() {\r\n        this.ctx.fillStyle = this._baseColor ? this._baseColor.rgba : 'rgba(255,255,255,1)';\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        /** @type {?} */\r\n        const grdWhite = this.ctx.createLinearGradient(0, 0, this.width, 0);\r\n        grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\r\n        grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\r\n        this.ctx.fillStyle = grdWhite;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n        /** @type {?} */\r\n        const grdBlack = this.ctx.createLinearGradient(0, 0, 0, this.height);\r\n        grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\r\n        grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\r\n        this.ctx.fillStyle = grdBlack;\r\n        this.ctx.fillRect(0, 0, this.width, this.height);\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    onSliderColorChanged(c) {\r\n        this._baseColor = c;\r\n        this.color = c;\r\n        this.fillGradient();\r\n        this.emitChange(c);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    changeColor(e) {\r\n        this.x = e.offsetX;\r\n        this.y = e.offsetY;\r\n        this._resetBaseColor = false;\r\n        this.draw();\r\n        const { r, g, b } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\r\n        this.emitChange(new Color(r, g, b));\r\n    }\r\n}\nNgxMatColorCanvasComponent.ɵfac = function NgxMatColorCanvasComponent_Factory(t) { return new (t || NgxMatColorCanvasComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nNgxMatColorCanvasComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatColorCanvasComponent, selectors: [[\"ngx-mat-color-canvas\"]], hostAttrs: [1, \"ngx-mat-color-canvas\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 30, vars: 3, consts: [[3, \"formGroup\"], [1, \"color-canvas-row\"], [1, \"zone-canvas\"], [\"id\", \"color-block\", \"width\", \"200\", \"height\", \"200\", 1, \"zone-block\", 3, \"mousedown\", \"mouseup\"], [3, \"colorChanged\"], [1, \"zone-inputs\"], [\"matInput\", \"\", \"formControlName\", \"r\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"g\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"b\", \"ngxMatNumericColorInput\", \"\", \"autocomplete\", \"off\"], [\"mat-mini-fab\", \"\", 1, \"preview\"], [\"matPrefix\", \"\", 1, \"symbol\"], [\"matInput\", \"\", \"formControlName\", \"hex\", \"autocomplete\", \"off\"], [\"matInput\", \"\", \"formControlName\", \"a\", \"type\", \"number\", \"min\", \"0\", \"max\", \"1\", \"step\", \"0.1\", \"autocomplete\", \"off\"]], template: function NgxMatColorCanvasComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"form\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"canvas\", 3);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function NgxMatColorCanvasComponent_Template_canvas_mousedown_3_listener($event) { return ctx.onMousedown($event); })(\"mouseup\", function NgxMatColorCanvasComponent_Template_canvas_mouseup_3_listener($event) { return ctx.onMouseup($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"ngx-mat-color-slider\", 4);\n        ɵngcc0.ɵɵlistener(\"colorChanged\", function NgxMatColorCanvasComponent_Template_ngx_mat_color_slider_colorChanged_4_listener($event) { return ctx.onSliderColorChanged($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelementStart(6, \"mat-form-field\");\n        ɵngcc0.ɵɵelementStart(7, \"mat-label\");\n        ɵngcc0.ɵɵtext(8, \"R\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(9, \"input\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(10, \"mat-form-field\");\n        ɵngcc0.ɵɵelementStart(11, \"mat-label\");\n        ɵngcc0.ɵɵtext(12, \"G\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(13, \"input\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(14, \"mat-form-field\");\n        ɵngcc0.ɵɵelementStart(15, \"mat-label\");\n        ɵngcc0.ɵɵtext(16, \"B\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(17, \"input\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(18, \"div\", 1);\n        ɵngcc0.ɵɵelement(19, \"button\", 9);\n        ɵngcc0.ɵɵelementStart(20, \"mat-form-field\");\n        ɵngcc0.ɵɵelementStart(21, \"mat-label\");\n        ɵngcc0.ɵɵtext(22, \"HEX6\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(23, \"mat-label\", 10);\n        ɵngcc0.ɵɵtext(24, \"#\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(25, \"input\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(26, \"mat-form-field\");\n        ɵngcc0.ɵɵelementStart(27, \"mat-label\");\n        ɵngcc0.ɵɵtext(28, \"A\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(29, \"input\", 12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n        ɵngcc0.ɵɵadvance(19);\n        ɵngcc0.ɵɵstyleProp(\"background-color\", (ctx.color == null ? null : ctx.color.rgba) || \"transparent\");\n    } }, directives: function () { return [ɵngcc1.ɵangular_packages_forms_forms_y, ɵngcc1.NgControlStatusGroup, ɵngcc1.FormGroupDirective, NgxMatColorSliderComponent, ɵngcc2.MatFormField, ɵngcc2.MatLabel, ɵngcc3.MatInput, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.FormControlName, NumericColorInputDirective, ɵngcc4.MatButton, ɵngcc2.MatPrefix, ɵngcc1.NumberValueAccessor]; }, styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:200px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:200px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;flex-direction:column;height:200px;margin-left:16px;margin-top:12px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{height:40px;min-height:40px;min-width:40px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type .symbol{color:rgba(0,0,0,.54);font-weight:700}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:last-of-type{width:40px}.ngx-mat-color-canvas .mat-form-field-label{font-weight:700}\"], encapsulation: 2 });\r\n/** @nocollapse */\r\nNgxMatColorCanvasComponent.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorCanvasComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-color-canvas',\n                template: \"<form [formGroup]=\\\"formGroup\\\">\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <div class=\\\"zone-canvas\\\">\\r\\n            <canvas id=\\\"color-block\\\" class=\\\"zone-block\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n                width=\\\"200\\\" height=\\\"200\\\"></canvas>\\r\\n            <ngx-mat-color-slider (colorChanged)=\\\"onSliderColorChanged($event)\\\"></ngx-mat-color-slider>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"zone-inputs\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-label>R</mat-label>\\r\\n                <input matInput formControlName=\\\"r\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>G</mat-label>\\r\\n                <input matInput formControlName=\\\"g\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n\\r\\n            <mat-form-field>\\r\\n                <mat-label>B</mat-label>\\r\\n                <input matInput formControlName=\\\"b\\\" ngxMatNumericColorInput autocomplete=\\\"off\\\">\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"color-canvas-row\\\">\\r\\n        <button mat-mini-fab [style.background-color]=\\\"color?.rgba || 'transparent'\\\" class=\\\"preview\\\"></button>\\r\\n        <mat-form-field>\\r\\n            <mat-label>HEX6</mat-label>\\r\\n            <mat-label matPrefix class=\\\"symbol\\\">#&nbsp;</mat-label>\\r\\n            <input matInput formControlName=\\\"hex\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n        <mat-form-field>\\r\\n            <mat-label>A</mat-label>\\r\\n            <input matInput formControlName=\\\"a\\\" type=\\\"number\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.1\\\" autocomplete=\\\"off\\\">\\r\\n        </mat-form-field>\\r\\n    </div>\\r\\n</form>\",\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    'class': 'ngx-mat-color-canvas'\n                },\n                styles: [\".ngx-mat-color-canvas .color-canvas-row{display:flex}.ngx-mat-color-canvas .color-canvas-row:first-of-type{height:200px;margin-bottom:12px}.ngx-mat-color-canvas .color-canvas-row:first-of-type .card{height:180px}.ngx-mat-color-canvas .color-canvas-row canvas:hover{cursor:crosshair}.ngx-mat-color-canvas .color-canvas-row .zone{display:flex}.ngx-mat-color-canvas .color-canvas-row .zone-canvas{height:200px}.ngx-mat-color-canvas .color-canvas-row .zone-canvas .zone-block{border:1px solid rgba(0,0,0,.12)}.ngx-mat-color-canvas .color-canvas-row .zone-strip{flex-basis:auto;margin-left:10px}.ngx-mat-color-canvas .color-canvas-row .zone-inputs{display:flex;flex-direction:column;height:200px;margin-left:16px;margin-top:12px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2){display:flex}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .preview{height:40px;min-height:40px;min-width:40px;width:40px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field{margin-left:16px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type{width:170px}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:first-of-type .symbol{color:rgba(0,0,0,.54);font-weight:700}.ngx-mat-color-canvas .color-canvas-row:nth-of-type(2) .mat-form-field:last-of-type{width:40px}.ngx-mat-color-canvas .mat-form-field-label{font-weight:700}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorCanvasComponent.prototype._baseColor;\r\n    /** @type {?} */\r\n    NgxMatColorCanvasComponent.prototype._resetBaseColor;\r\n    /** @type {?} */\r\n    NgxMatColorCanvasComponent.prototype.formGroup;\r\n    /** @type {?} */\r\n    NgxMatColorCanvasComponent.prototype.rgba;\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    NgxMatColorCanvasComponent.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-collection/color-collection.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxMatColorCollectionComponent {\r\n    constructor() {\r\n        this.colorChanged = new EventEmitter();\r\n        this.colors1 = BASIC_COLORS.slice(0, 8);\r\n        this.colors2 = BASIC_COLORS.slice(8, 16);\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    set color(c) {\r\n        if (c) {\r\n            this.selectedColor = c.toHexString();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @param {?} hex\r\n     * @return {?}\r\n     */\r\n    select(hex) {\r\n        this.selectedColor = hex;\r\n        const { r, g, b, a } = stringInputToObject(hex);\r\n        this.colorChanged.emit(new Color(r, g, b, a));\r\n    }\r\n}\nNgxMatColorCollectionComponent.ɵfac = function NgxMatColorCollectionComponent_Factory(t) { return new (t || NgxMatColorCollectionComponent)(); };\nNgxMatColorCollectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatColorCollectionComponent, selectors: [[\"ngx-mat-color-collection\"]], hostAttrs: [1, \"ngx-mat-color-collection\"], inputs: { color: \"color\" }, outputs: { colorChanged: \"colorChanged\" }, decls: 4, vars: 2, consts: [[1, \"color-collection-row\"], [\"mat-mini-fab\", \"\", \"class\", \"btn-color\", 3, \"background-color\", \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"mat-mini-fab\", \"\", 1, \"btn-color\", 3, \"ngClass\", \"click\"]], template: function NgxMatColorCollectionComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, NgxMatColorCollectionComponent_button_1_Template, 1, 5, \"button\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(3, NgxMatColorCollectionComponent_button_3_Template, 1, 5, \"button\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.colors1);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.colors2);\n    } }, directives: [ɵngcc5.NgForOf, ɵngcc4.MatButton, ɵngcc5.NgClass], styles: [\".ngx-mat-color-collection .btn-color{box-shadow:none;height:20px;margin-right:11px;opacity:.3;width:20px}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);opacity:1}\"], encapsulation: 2 });\r\n/** @nocollapse */\r\nNgxMatColorCollectionComponent.ctorParameters = () => [];\r\nNgxMatColorCollectionComponent.propDecorators = {\r\n    colorChanged: [{ type: Output }],\r\n    color: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorCollectionComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-color-collection',\n                template: \"<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors1\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\\r\\n<div class=\\\"color-collection-row\\\">\\r\\n  <button *ngFor=\\\"let c of colors2\\\" mat-mini-fab [style.background-color]=\\\"c\\\" class=\\\"btn-color\\\"\\r\\n    (click)=\\\"select(c)\\\" [ngClass]=\\\"{'active': selectedColor === c}\\\">\\r\\n  </button>\\r\\n</div>\",\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    'class': 'ngx-mat-color-collection'\n                },\n                styles: [\".ngx-mat-color-collection .btn-color{box-shadow:none;height:20px;margin-right:11px;opacity:.3;width:20px}.ngx-mat-color-collection .btn-color.active{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12);opacity:1}\"]\n            }]\n    }], function () { return []; }, { colorChanged: [{\n            type: Output\n        }], color: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /** @type {?} */\r\n    NgxMatColorCollectionComponent.prototype.colorChanged;\r\n    /** @type {?} */\r\n    NgxMatColorCollectionComponent.prototype.selectedColor;\r\n    /** @type {?} */\r\n    NgxMatColorCollectionComponent.prototype.colors1;\r\n    /** @type {?} */\r\n    NgxMatColorCollectionComponent.prototype.colors2;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-canvas/color-slider/color-slider.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxMatColorSliderComponent extends NgxMatBaseColorCanvas {\r\n    /**\r\n     * @param {?} zone\r\n     */\r\n    constructor(zone) {\r\n        super(zone, 'color-strip');\r\n        this.zone = zone;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        super.ngAfterViewInit();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    fillGradient() {\r\n        /** @type {?} */\r\n        const grd = this.ctx.createLinearGradient(0, 0, 0, this.height);\r\n        grd.addColorStop(0, 'rgba(255, 0, 0, 1)');\r\n        grd.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\r\n        grd.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\r\n        grd.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\r\n        grd.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\r\n        grd.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\r\n        grd.addColorStop(1, 'rgba(255, 0, 0, 1)');\r\n        this.ctx.fillStyle = grd;\r\n        this.ctx.fill();\r\n    }\r\n    /**\r\n     * @param {?} x\r\n     * @param {?} y\r\n     * @return {?}\r\n     */\r\n    redrawIndicator(x, y) {\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle = 'white';\r\n        this.ctx.lineWidth = 2;\r\n        this.ctx.arc(7.5, y, 7.5, 0, 2 * Math.PI, false);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    changeColor(e) {\r\n        this.x = e.offsetX;\r\n        this.y = e.offsetY;\r\n        this.draw();\r\n        const { r, g, b } = getColorAtPosition(this.ctx, e.offsetX, e.offsetY);\r\n        this.emitChange(new Color(r, g, b));\r\n    }\r\n}\nNgxMatColorSliderComponent.ɵfac = function NgxMatColorSliderComponent_Factory(t) { return new (t || NgxMatColorSliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nNgxMatColorSliderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatColorSliderComponent, selectors: [[\"ngx-mat-color-slider\"]], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"id\", \"color-strip\", \"width\", \"15\", \"height\", \"200\", 1, \"zone-strip\", 3, \"mousedown\", \"mouseup\"]], template: function NgxMatColorSliderComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"canvas\", 0);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function NgxMatColorSliderComponent_Template_canvas_mousedown_0_listener($event) { return ctx.onMousedown($event); })(\"mouseup\", function NgxMatColorSliderComponent_Template_canvas_mouseup_0_listener($event) { return ctx.onMouseup($event); });\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\"\"] });\r\n/** @nocollapse */\r\nNgxMatColorSliderComponent.ctorParameters = () => [\r\n    { type: NgZone }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorSliderComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-color-slider',\n                template: \"<canvas id=\\\"color-strip\\\" class=\\\"zone-strip\\\" (mousedown)=\\\"onMousedown($event)\\\" (mouseup)=\\\"onMouseup($event)\\\"\\r\\n width=\\\"15\\\" height=\\\"200\\\"></canvas>\",\n                styles: [\"\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @protected\r\n     */\r\n    NgxMatColorSliderComponent.prototype.zone;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/color-adapter.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass ColorAdapter {\r\n    constructor() { }\r\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\r\n    sameColor(a, b) {\r\n        if (a == null && b == null)\r\n            return true;\r\n        if (a != null && b != null)\r\n            return a.rgba === b.rgba;\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @param {?} format\r\n     * @return {?}\r\n     */\r\n    format(c, format) {\r\n        return c.toString(format);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    parse(value) {\r\n        /** @type {?} */\r\n        const obj = stringInputToObject(value);\r\n        if (obj) {\r\n            return new Color(obj.r, obj.g, obj.b, obj.a);\r\n        }\r\n        return null;\r\n    }\r\n}\nColorAdapter.ɵfac = function ColorAdapter_Factory(t) { return new (t || ColorAdapter)(); };\nColorAdapter.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ColorAdapter, factory: ColorAdapter.ɵfac });\r\n/** @nocollapse */\r\nColorAdapter.ctorParameters = () => [];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColorAdapter, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/color-formats.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst NGX_MAT_COLOR_FORMATS = {\r\n    display: {\r\n        colorInput: 'hex'\r\n    }\r\n};\r\n/** @type {?} */\r\nconst MAT_COLOR_FORMATS = new InjectionToken('mat-color-formats');\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/services/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-picker/color-picker.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that determines the scroll handling while the calendar is open.\r\n * @type {?}\r\n */\r\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY = new InjectionToken('ngx-mat-colorpicker-scroll-strategy');\r\n/**\r\n * @param {?} overlay\r\n * @return {?}\r\n */\r\nfunction NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY(overlay) {\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    () => overlay.scrollStrategies.reposition());\r\n}\r\n/** @type {?} */\r\nconst NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n    provide: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY,\r\n};\r\nclass NgxMatColorPickerContentBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\nif (false) {\r\n    /** @type {?} */\r\n    NgxMatColorPickerContentBase.prototype._elementRef;\r\n}\r\n/** @type {?} */\r\nconst _MatDatepickerContentMixinBase = mixinColor(NgxMatColorPickerContentBase);\r\nclass NgxMatColorPickerContentComponent extends _MatDatepickerContentMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     */\r\n    constructor(elementRef) {\r\n        super(elementRef);\r\n    }\r\n}\nNgxMatColorPickerContentComponent.ɵfac = function NgxMatColorPickerContentComponent_Factory(t) { return new (t || NgxMatColorPickerContentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNgxMatColorPickerContentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatColorPickerContentComponent, selectors: [[\"ngx-mat-color-picker-content\"]], viewQuery: function NgxMatColorPickerContentComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(NgxMatColorPaletteComponent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._palette = _t.first);\n    } }, hostAttrs: [1, \"ngx-mat-colorpicker-content\"], hostVars: 3, hostBindings: function NgxMatColorPickerContentComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@transformPanel\", \"enter\");\n        ɵngcc0.ɵɵclassProp(\"ngx-mat-colorpicker-content-touch\", ctx.picker.touchUi);\n    } }, inputs: { color: \"color\" }, exportAs: [\"ngxMatColorPickerContent\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, \"color\", \"colorChanged\"]], template: function NgxMatColorPickerContentComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ngx-mat-color-palette\", 0);\n        ɵngcc0.ɵɵlistener(\"colorChanged\", function NgxMatColorPickerContentComponent_Template_ngx_mat_color_palette_colorChanged_0_listener($event) { return ctx.picker.select($event); });\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"color\", ctx.picker._selected);\n    } }, directives: [NgxMatColorPaletteComponent], styles: [\".ngx-mat-colorpicker-content{background-color:#fff;border-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12);color:rgba(0,0,0,.87);display:block;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{height:354px;width:296px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{max-height:788px;max-width:750px;min-height:312px;min-width:250px}@media (orientation:landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{height:80vh;width:64vh}}@media (orientation:portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{height:100vw;width:80vw}}\"], encapsulation: 2, data: { animation: [\n            matDatepickerAnimations.transformPanel,\n            matDatepickerAnimations.fadeInCalendar,\n        ] }, changeDetection: 0 });\r\n/** @nocollapse */\r\nNgxMatColorPickerContentComponent.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\nNgxMatColorPickerContentComponent.propDecorators = {\r\n    _palette: [{ type: ViewChild, args: [NgxMatColorPaletteComponent,] }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorPickerContentComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-color-picker-content',\n                template: \"<ngx-mat-color-palette (colorChanged)=\\\"picker.select($event)\\\" [color]=\\\"picker._selected\\\"></ngx-mat-color-palette>\",\n                host: {\n                    'class': 'ngx-mat-colorpicker-content',\n                    '[@transformPanel]': '\"enter\"',\n                    '[class.ngx-mat-colorpicker-content-touch]': 'picker.touchUi'\n                },\n                animations: [\n                    matDatepickerAnimations.transformPanel,\n                    matDatepickerAnimations.fadeInCalendar,\n                ],\n                exportAs: 'ngxMatColorPickerContent',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['color'],\n                styles: [\".ngx-mat-colorpicker-content{background-color:#fff;border-radius:4px;box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12);color:rgba(0,0,0,.87);display:block;padding:16px}.ngx-mat-colorpicker-content .ngx-mat-color-palette{height:354px;width:296px}.ngx-mat-colorpicker-content-touch{display:block;max-height:80vh;overflow:auto}.ngx-mat-colorpicker-content-touch .ngx-mat-color-palette{max-height:788px;max-width:750px;min-height:312px;min-width:250px}@media (orientation:landscape){.mat-colorpicker-content-touch .ngx-mat-color-palette{height:80vh;width:64vh}}@media (orientation:portrait){.mat-colorpicker-content-touch .ngx-mat-color-palette{height:100vw;width:80vw}}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _palette: [{\n            type: ViewChild,\n            args: [NgxMatColorPaletteComponent]\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * Reference to the internal calendar component.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerContentComponent.prototype._palette;\r\n    /** @type {?} */\r\n    NgxMatColorPickerContentComponent.prototype.picker;\r\n    /** @type {?} */\r\n    NgxMatColorPickerContentComponent.prototype._isAbove;\r\n}\r\nclass NgxMatColorPickerComponent {\r\n    /**\r\n     * @param {?} _dialog\r\n     * @param {?} _overlay\r\n     * @param {?} _zone\r\n     * @param {?} _adapter\r\n     * @param {?} _dir\r\n     * @param {?} scrollStrategy\r\n     * @param {?} _document\r\n     * @param {?} _viewContainerRef\r\n     */\r\n    constructor(_dialog, _overlay, _zone, _adapter, _dir, scrollStrategy, _document, _viewContainerRef) {\r\n        this._dialog = _dialog;\r\n        this._overlay = _overlay;\r\n        this._zone = _zone;\r\n        this._adapter = _adapter;\r\n        this._dir = _dir;\r\n        this._document = _document;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        /**\r\n         * Emits when the datepicker has been opened.\r\n         */\r\n        this.openedStream = new EventEmitter();\r\n        /**\r\n         * Emits when the datepicker has been closed.\r\n         */\r\n        this.closedStream = new EventEmitter();\r\n        this._touchUi = false;\r\n        this._opened = false;\r\n        this._defaultColor = 'primary';\r\n        this._validSelected = null;\r\n        /**\r\n         * Emits when the datepicker is disabled.\r\n         */\r\n        this._disabledChange = new Subject();\r\n        /**\r\n         * The element that was focused before the datepicker was opened.\r\n         */\r\n        this._focusedElementBeforeOpen = null;\r\n        /**\r\n         * Subscription to value changes in the associated input element.\r\n         */\r\n        this._inputSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Emits new selected date when selected date changes.\r\n         */\r\n        this._selectedChanged = new Subject();\r\n        this._scrollStrategy = scrollStrategy;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        return this._disabled === undefined && this._pickerInput ?\r\n            this._pickerInput.disabled : !!this._disabled;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        /** @type {?} */\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._disabled) {\r\n            this._disabled = newValue;\r\n            this._disabledChange.next(newValue);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get touchUi() { return this._touchUi; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set touchUi(value) {\r\n        this._touchUi = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Whether the calendar is open.\r\n     * @return {?}\r\n     */\r\n    get opened() { return this._opened; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set opened(value) { value ? this.open() : this.close(); }\r\n    /**\r\n     * Default Color palette to use on the datepicker's calendar.\r\n     * @return {?}\r\n     */\r\n    get defaultColor() {\r\n        return this._defaultColor;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set defaultColor(value) {\r\n        this._defaultColor = value;\r\n    }\r\n    /**\r\n     * Color palette to use on the datepicker's calendar.\r\n     * @return {?}\r\n     */\r\n    get color() {\r\n        return this._color ||\r\n            (this._pickerInput ? this._pickerInput.getThemePalette() : undefined);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set color(value) {\r\n        this._color = value;\r\n    }\r\n    /**\r\n     * The currently selected date.\r\n     * @return {?}\r\n     */\r\n    get _selected() { return this._validSelected; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set _selected(value) { this._validSelected = value; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.close();\r\n        this._inputSubscription.unsubscribe();\r\n        this._disabledChange.complete();\r\n        if (this._popupRef) {\r\n            this._popupRef.dispose();\r\n            this._popupComponentRef = null;\r\n        }\r\n    }\r\n    /**\r\n     * Selects the given date\r\n     * @param {?} nextVal\r\n     * @return {?}\r\n     */\r\n    select(nextVal) {\r\n        /** @type {?} */\r\n        let oldValue = this._selected;\r\n        this._selected = nextVal;\r\n        if (!this._adapter.sameColor(oldValue, this._selected)) {\r\n            this._selectedChanged.next(nextVal);\r\n        }\r\n    }\r\n    /**\r\n     * Register an input with this datepicker.\r\n     * @param {?} input The datepicker input to register with this datepicker.\r\n     * @return {?}\r\n     */\r\n    registerInput(input) {\r\n        if (this._pickerInput) {\r\n            throw Error('A ColorPicker can only be associated with a single input.');\r\n        }\r\n        this._pickerInput = input;\r\n        this._inputSubscription =\r\n            this._pickerInput._valueChange.subscribe((/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            (value) => this._selected = value));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    open() {\r\n        if (this._opened || this.disabled) {\r\n            return;\r\n        }\r\n        if (!this._pickerInput) {\r\n            throw Error('Attempted to open an ColorPicker with no associated input.');\r\n        }\r\n        if (this._document) {\r\n            this._focusedElementBeforeOpen = this._document.activeElement;\r\n        }\r\n        this.touchUi ? this._openAsDialog() : this._openAsPopup();\r\n        this._opened = true;\r\n        this.openedStream.emit();\r\n    }\r\n    /**\r\n     * Open the calendar as a dialog.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _openAsDialog() {\r\n        if (this._dialogRef) {\r\n            this._dialogRef.close();\r\n        }\r\n        this._dialogRef = this._dialog.open(NgxMatColorPickerContentComponent, {\r\n            direction: this._dir ? this._dir.value : 'ltr',\r\n            viewContainerRef: this._viewContainerRef,\r\n            panelClass: 'ngx-mat-colorpicker-dialog',\r\n        });\r\n        this._dialogRef.afterClosed().subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this.close()));\r\n        this._dialogRef.componentInstance.picker = this;\r\n        this._setColor();\r\n    }\r\n    /**\r\n     * Open the calendar as a popup.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _openAsPopup() {\r\n        if (!this._portal) {\r\n            this._portal = new ComponentPortal(NgxMatColorPickerContentComponent, this._viewContainerRef);\r\n        }\r\n        if (!this._popupRef) {\r\n            this._createPopup();\r\n        }\r\n        if (!this._popupRef.hasAttached()) {\r\n            this._popupComponentRef = this._popupRef.attach(this._portal);\r\n            this._popupComponentRef.instance.picker = this;\r\n            this._setColor();\r\n            // Update the position once the calendar has rendered.\r\n            this._zone.onStable.asObservable().pipe(take(1)).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this._popupRef.updatePosition();\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * Create the popup.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _createPopup() {\r\n        /** @type {?} */\r\n        const overlayConfig = new OverlayConfig({\r\n            positionStrategy: this._createPopupPositionStrategy(),\r\n            hasBackdrop: true,\r\n            backdropClass: 'mat-overlay-transparent-backdrop',\r\n            direction: this._dir,\r\n            scrollStrategy: this._scrollStrategy(),\r\n            panelClass: 'mat-colorpicker-popup',\r\n        });\r\n        this._popupRef = this._overlay.create(overlayConfig);\r\n        this._popupRef.overlayElement.setAttribute('role', 'dialog');\r\n        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n            return event.keyCode === ESCAPE ||\r\n                (this._pickerInput && event.altKey && event.keyCode === UP_ARROW);\r\n        })))).subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n            this.close();\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (!this._opened) {\r\n            return;\r\n        }\r\n        if (this._popupRef && this._popupRef.hasAttached()) {\r\n            this._popupRef.detach();\r\n        }\r\n        if (this._dialogRef) {\r\n            this._dialogRef.close();\r\n            this._dialogRef = null;\r\n        }\r\n        if (this._portal && this._portal.isAttached) {\r\n            this._portal.detach();\r\n        }\r\n        /** @type {?} */\r\n        const completeClose = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // The `_opened` could've been reset already if\r\n            // we got two events in quick succession.\r\n            if (this._opened) {\r\n                this._opened = false;\r\n                this.closedStream.emit();\r\n                this._focusedElementBeforeOpen = null;\r\n            }\r\n        });\r\n        if (this._focusedElementBeforeOpen &&\r\n            typeof this._focusedElementBeforeOpen.focus === 'function') {\r\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n            // able to close the calendar at all. We work around it by making the logic, that marks\r\n            // the datepicker as closed, async as well.\r\n            this._focusedElementBeforeOpen.focus();\r\n            setTimeout(completeClose);\r\n        }\r\n        else {\r\n            completeClose();\r\n        }\r\n    }\r\n    /**\r\n     * Passes the current theme color along to the calendar overlay.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _setColor() {\r\n        /** @type {?} */\r\n        const color = this.color;\r\n        if (this._popupComponentRef) {\r\n            this._popupComponentRef.instance.color = color;\r\n        }\r\n        if (this._dialogRef) {\r\n            this._dialogRef.componentInstance.color = color;\r\n        }\r\n    }\r\n    /**\r\n     * Create the popup PositionStrategy.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _createPopupPositionStrategy() {\r\n        return this._overlay.position()\r\n            .flexibleConnectedTo(this._pickerInput.getConnectedOverlayOrigin())\r\n            .withTransformOriginOn('.ngx-mat-colorpicker-content')\r\n            .withFlexibleDimensions(false)\r\n            .withViewportMargin(8)\r\n            .withLockedPosition()\r\n            .withPositions([\r\n            {\r\n                originX: 'start',\r\n                originY: 'bottom',\r\n                overlayX: 'start',\r\n                overlayY: 'top'\r\n            },\r\n            {\r\n                originX: 'start',\r\n                originY: 'top',\r\n                overlayX: 'start',\r\n                overlayY: 'bottom'\r\n            },\r\n            {\r\n                originX: 'end',\r\n                originY: 'bottom',\r\n                overlayX: 'end',\r\n                overlayY: 'top'\r\n            },\r\n            {\r\n                originX: 'end',\r\n                originY: 'top',\r\n                overlayX: 'end',\r\n                overlayY: 'bottom'\r\n            }\r\n        ]);\r\n    }\r\n}\nNgxMatColorPickerComponent.ɵfac = function NgxMatColorPickerComponent_Factory(t) { return new (t || NgxMatColorPickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc6.MatDialog), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ColorAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nNgxMatColorPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatColorPickerComponent, selectors: [[\"ngx-mat-color-picker\"]], inputs: { disabled: \"disabled\", touchUi: \"touchUi\", opened: \"opened\", defaultColor: \"defaultColor\", color: \"color\" }, outputs: { openedStream: \"opened\", closedStream: \"closed\" }, exportAs: [\"ngxMatColorPicker\"], decls: 0, vars: 0, template: function NgxMatColorPickerComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });\r\n/** @nocollapse */\r\nNgxMatColorPickerComponent.ctorParameters = () => [\r\n    { type: MatDialog },\r\n    { type: Overlay },\r\n    { type: NgZone },\r\n    { type: ColorAdapter },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: ViewContainerRef }\r\n];\r\nNgxMatColorPickerComponent.propDecorators = {\r\n    openedStream: [{ type: Output, args: ['opened',] }],\r\n    closedStream: [{ type: Output, args: ['closed',] }],\r\n    disabled: [{ type: Input }],\r\n    touchUi: [{ type: Input }],\r\n    opened: [{ type: Input }],\r\n    defaultColor: [{ type: Input }],\r\n    color: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorPickerComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-color-picker',\n                template: '',\n                exportAs: 'ngxMatColorPicker',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc6.MatDialog }, { type: ɵngcc7.Overlay }, { type: ɵngcc0.NgZone }, { type: ColorAdapter }, { type: ɵngcc8.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ViewContainerRef }]; }, { openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], disabled: [{\n            type: Input\n        }], touchUi: [{\n            type: Input\n        }], opened: [{\n            type: Input\n        }], defaultColor: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._scrollStrategy;\r\n    /**\r\n     * Emits when the datepicker has been opened.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerComponent.prototype.openedStream;\r\n    /**\r\n     * Emits when the datepicker has been closed.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerComponent.prototype.closedStream;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._disabled;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._touchUi;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._opened;\r\n    /** @type {?} */\r\n    NgxMatColorPickerComponent.prototype._defaultColor;\r\n    /** @type {?} */\r\n    NgxMatColorPickerComponent.prototype._color;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._validSelected;\r\n    /** @type {?} */\r\n    NgxMatColorPickerComponent.prototype._pickerInput;\r\n    /**\r\n     * A reference to the overlay when the picker is opened as a popup.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerComponent.prototype._popupRef;\r\n    /**\r\n     * A reference to the dialog when the picker is opened as a dialog.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._dialogRef;\r\n    /**\r\n     * Reference to the component instantiated in popup mode.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._popupComponentRef;\r\n    /**\r\n     * A portal containing the content for this picker.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._portal;\r\n    /**\r\n     * Emits when the datepicker is disabled.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerComponent.prototype._disabledChange;\r\n    /**\r\n     * The element that was focused before the datepicker was opened.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._focusedElementBeforeOpen;\r\n    /**\r\n     * Subscription to value changes in the associated input element.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._inputSubscription;\r\n    /**\r\n     * Emits new selected date when selected date changes.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerComponent.prototype._selectedChanged;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._dialog;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._overlay;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._zone;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._adapter;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._dir;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._document;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerComponent.prototype._viewContainerRef;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-picker/color-input.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxMatColorPickerInputEvent {\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} targetElement\r\n     */\r\n    constructor(target, targetElement) {\r\n        this.target = target;\r\n        this.targetElement = targetElement;\r\n        this.value = this.target.value;\r\n    }\r\n}\r\nif (false) {\r\n    /**\r\n     * The new value for the target colorpicker input.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerInputEvent.prototype.value;\r\n    /**\r\n     * Reference to the colorpicker input component that emitted the event.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerInputEvent.prototype.target;\r\n    /**\r\n     * Reference to the native input element associated with the colorpicker input.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerInputEvent.prototype.targetElement;\r\n}\r\n/** @type {?} */\r\nconst MAT_COLORPICKER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgxMatColorPickerInput)),\r\n    multi: true\r\n};\r\n/** @type {?} */\r\nconst MAT_COLORPICKER_VALIDATORS = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => NgxMatColorPickerInput)),\r\n    multi: true\r\n};\r\nclass NgxMatColorPickerInput {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _formField\r\n     * @param {?} _colorFormats\r\n     * @param {?} _adapter\r\n     */\r\n    constructor(_elementRef, _formField, _colorFormats, _adapter) {\r\n        this._elementRef = _elementRef;\r\n        this._formField = _formField;\r\n        this._colorFormats = _colorFormats;\r\n        this._adapter = _adapter;\r\n        /**\r\n         * Emits when a `change` event is fired on this `<input>`.\r\n         */\r\n        this.colorChange = new EventEmitter();\r\n        /**\r\n         * Emits when an `input` event is fired on this `<input>`.\r\n         */\r\n        this.colorInput = new EventEmitter();\r\n        /**\r\n         * Emits when the disabled state has changed\r\n         */\r\n        this._disabledChange = new EventEmitter();\r\n        /**\r\n         * Emits when the value changes (either due to user input or programmatic change).\r\n         */\r\n        this._valueChange = new EventEmitter();\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._cvaOnChange = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._validatorOnChange = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._pickerSubscription = Subscription.EMPTY;\r\n        /**\r\n         * The combined form control validator for this input.\r\n         */\r\n        this._validator = Validators.compose([]);\r\n        /**\r\n         * Whether the last value set on the input was valid.\r\n         */\r\n        this._lastValueValid = false;\r\n        if (!this._colorFormats) {\r\n            throw createMissingDateImplError('MAT_COLOR_FORMATS');\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set ngxMatColorPicker(value) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        this._picker = value;\r\n        this._picker.registerInput(this);\r\n        this._pickerSubscription.unsubscribe();\r\n        this._pickerSubscription = this._picker._selectedChanged.subscribe((/**\r\n         * @param {?} selected\r\n         * @return {?}\r\n         */\r\n        (selected) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n            this._onTouched();\r\n            this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n            this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n        }));\r\n    }\r\n    /**\r\n     * Whether the colorpicker-input is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return !!this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        /** @type {?} */\r\n        const newValue = coerceBooleanProperty(value);\r\n        /** @type {?} */\r\n        const element = this._elementRef.nativeElement;\r\n        if (this._disabled !== newValue) {\r\n            this._disabled = newValue;\r\n            this._disabledChange.emit(newValue);\r\n        }\r\n        // We need to null check the `blur` method, because it's undefined during SSR.\r\n        if (newValue && element.blur) {\r\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n            // is problematic, because it would mean that it triggers another change detection cycle,\r\n            // which then causes a changed after checked error if the input element was focused before.\r\n            element.blur();\r\n        }\r\n    }\r\n    /**\r\n     * The value of the input.\r\n     * @return {?}\r\n     */\r\n    get value() { return this._value; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set value(value) {\r\n        /** @type {?} */\r\n        const oldValue = this.value;\r\n        this._value = value;\r\n        this._formatValue(value);\r\n        if (!this._adapter.sameColor(oldValue, value)) {\r\n            this._valueChange.emit(value);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the palette used by the input's form field, if any.\r\n     * @return {?}\r\n     */\r\n    getThemePalette() {\r\n        return this._formField ? this._formField.color : undefined;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnValidatorChange(fn) {\r\n        this._validatorOnChange = fn;\r\n    }\r\n    /**\r\n     * @param {?} c\r\n     * @return {?}\r\n     */\r\n    validate(c) {\r\n        return this._validator ? this._validator(c) : null;\r\n    }\r\n    /**\r\n     * @deprecated\r\n     * \\@breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\r\n     * @return {?}\r\n     */\r\n    getPopupConnectionElementRef() {\r\n        return this.getConnectedOverlayOrigin();\r\n    }\r\n    /**\r\n     * Gets the element that the colorpicker popup should be connected to.\r\n     * @return {?} The element to connect the popup to.\r\n     */\r\n    getConnectedOverlayOrigin() {\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._pickerSubscription.unsubscribe();\r\n        this._valueChange.complete();\r\n        this._disabledChange.complete();\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._cvaOnChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onChange() {\r\n        this.colorChange.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onKeydown(event) {\r\n        /** @type {?} */\r\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\r\n        if (this._picker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n            this._picker.open();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /**\r\n     * Handles blur events on the input.\r\n     * @return {?}\r\n     */\r\n    _onBlur() {\r\n        // Reformat the input only if we have a valid value.\r\n        if (this.value) {\r\n            this._formatValue(this.value);\r\n        }\r\n        this._onTouched();\r\n    }\r\n    /**\r\n     * Formats a value and sets it on the input element.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _formatValue(value) {\r\n        this._elementRef.nativeElement.value = value ? this._adapter.format(value, this._colorFormats.display.colorInput) : '';\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _onInput(value) {\r\n        /** @type {?} */\r\n        const lastValueWasValid = this._lastValueValid;\r\n        /** @type {?} */\r\n        const nextValue = this._adapter.parse(value);\r\n        if (!this._adapter.sameColor(nextValue, this._value)) {\r\n            this._value = nextValue;\r\n            this._cvaOnChange(nextValue);\r\n            this._valueChange.emit(nextValue);\r\n            this.colorInput.emit(new NgxMatColorPickerInputEvent(this, this._elementRef.nativeElement));\r\n        }\r\n        else if (lastValueWasValid !== this._lastValueValid) {\r\n            this._validatorOnChange();\r\n        }\r\n    }\r\n}\nNgxMatColorPickerInput.ɵfac = function NgxMatColorPickerInput_Factory(t) { return new (t || NgxMatColorPickerInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(MAT_COLOR_FORMATS, 8), ɵngcc0.ɵɵdirectiveInject(ColorAdapter)); };\nNgxMatColorPickerInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxMatColorPickerInput, selectors: [[\"input\", \"ngxMatColorPicker\", \"\"]], hostVars: 3, hostBindings: function NgxMatColorPickerInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function NgxMatColorPickerInput_input_HostBindingHandler($event) { return ctx._onInput($event.target.value); })(\"change\", function NgxMatColorPickerInput_change_HostBindingHandler() { return ctx._onChange(); })(\"blur\", function NgxMatColorPickerInput_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function NgxMatColorPickerInput_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx._picker ? \"dialog\" : null)(\"aria-owns\", (ctx._picker == null ? null : ctx._picker.opened) && ctx._picker.id || null);\n    } }, inputs: { ngxMatColorPicker: \"ngxMatColorPicker\", value: \"value\", disabled: \"disabled\" }, outputs: { colorChange: \"colorChange\", colorInput: \"colorInput\" }, exportAs: [\"ngxMatColorPickerInput\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_COLORPICKER_VALUE_ACCESSOR,\n            MAT_COLORPICKER_VALIDATORS,\n            { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatColorPickerInput },\n        ])] });\r\n/** @nocollapse */\r\nNgxMatColorPickerInput.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: MatFormField, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_COLOR_FORMATS,] }] },\r\n    { type: ColorAdapter }\r\n];\r\nNgxMatColorPickerInput.propDecorators = {\r\n    ngxMatColorPicker: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    colorChange: [{ type: Output }],\r\n    colorInput: [{ type: Output }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorPickerInput, [{\n        type: Directive,\n        args: [{\n                selector: 'input[ngxMatColorPicker]',\n                providers: [\n                    MAT_COLORPICKER_VALUE_ACCESSOR,\n                    MAT_COLORPICKER_VALIDATORS,\n                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatColorPickerInput },\n                ],\n                host: {\n                    '[attr.aria-haspopup]': '_picker ? \"dialog\" : null',\n                    '[attr.aria-owns]': '(_picker?.opened && _picker.id) || null',\n                    '[disabled]': 'disabled',\n                    '(input)': '_onInput($event.target.value)',\n                    '(change)': '_onChange()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)'\n                },\n                exportAs: 'ngxMatColorPickerInput'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc2.MatFormField, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_COLOR_FORMATS]\n            }] }, { type: ColorAdapter }]; }, { colorChange: [{\n            type: Output\n        }], colorInput: [{\n            type: Output\n        }], ngxMatColorPicker: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\r\nif (false) {\r\n    /** @type {?} */\r\n    NgxMatColorPickerInput.prototype._picker;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._disabled;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._value;\r\n    /**\r\n     * Emits when a `change` event is fired on this `<input>`.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerInput.prototype.colorChange;\r\n    /**\r\n     * Emits when an `input` event is fired on this `<input>`.\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerInput.prototype.colorInput;\r\n    /**\r\n     * Emits when the disabled state has changed\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerInput.prototype._disabledChange;\r\n    /**\r\n     * Emits when the value changes (either due to user input or programmatic change).\r\n     * @type {?}\r\n     */\r\n    NgxMatColorPickerInput.prototype._valueChange;\r\n    /** @type {?} */\r\n    NgxMatColorPickerInput.prototype._onTouched;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._cvaOnChange;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._validatorOnChange;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._pickerSubscription;\r\n    /**\r\n     * The combined form control validator for this input.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._validator;\r\n    /**\r\n     * Whether the last value set on the input was valid.\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._lastValueValid;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._elementRef;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._formField;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._colorFormats;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorPickerInput.prototype._adapter;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/color-toggle/color-toggle.component.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxMatColorToggleComponent {\r\n    /**\r\n     * @param {?} _cd\r\n     */\r\n    constructor(_cd) {\r\n        this._cd = _cd;\r\n        this._stateChanges = Subscription.EMPTY;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        if (this._disabled == null && this.picker) {\r\n            return this.picker.disabled;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes['picker']) {\r\n            this._watchStateChanges();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._stateChanges.unsubscribe();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._watchStateChanges();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    open(event) {\r\n        if (this.picker && !this.disabled) {\r\n            this.picker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _watchStateChanges() {\r\n        /** @type {?} */\r\n        const disabled$ = this.picker ? this.picker._disabledChange : of();\r\n        /** @type {?} */\r\n        const inputDisabled$ = this.picker && this.picker._pickerInput ?\r\n            this.picker._pickerInput._disabledChange : of();\r\n        /** @type {?} */\r\n        const pickerToggled$ = this.picker ?\r\n            merge(this.picker.openedStream, this.picker.closedStream) : of();\r\n        this._stateChanges.unsubscribe();\r\n        this._stateChanges = merge(disabled$, inputDisabled$, pickerToggled$).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this._cd.markForCheck()));\r\n    }\r\n}\nNgxMatColorToggleComponent.ɵfac = function NgxMatColorToggleComponent_Factory(t) { return new (t || NgxMatColorToggleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nNgxMatColorToggleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatColorToggleComponent, selectors: [[\"ngx-mat-color-toggle\"]], viewQuery: function NgxMatColorToggleComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._button = _t.first);\n    } }, hostAttrs: [1, \"ngx-mat-color-toggle\"], hostVars: 7, hostBindings: function NgxMatColorToggleComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function NgxMatColorToggleComponent_focus_HostBindingHandler() { return ctx._button.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", -1);\n        ɵngcc0.ɵɵclassProp(\"ngx-mat-color-toggle-active\", ctx.picker && ctx.picker.opened)(\"mat-accent\", ctx.picker && ctx.picker.color === \"accent\")(\"mat-warn\", ctx.picker && ctx.picker.color === \"warn\");\n    } }, inputs: { disabled: \"disabled\", picker: [\"for\", \"picker\"], tabIndex: \"tabIndex\" }, exportAs: [\"ngxMatColorPickerToggle\"], features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 4, vars: 5, consts: [[\"mat-icon-button\", \"\", \"type\", \"button\", 3, \"disabled\", \"click\"], [\"button\", \"\"]], template: function NgxMatColorToggleComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function NgxMatColorToggleComponent_Template_button_click_0_listener($event) { return ctx.open($event); });\n        ɵngcc0.ɵɵelementStart(2, \"mat-icon\");\n        ɵngcc0.ɵɵtext(3, \"palette\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", ctx.picker ? \"dialog\" : null)(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵstyleProp(\"color\", ctx.picker == null ? null : ctx.picker._selected == null ? null : ctx.picker._selected.rgba);\n    } }, directives: [ɵngcc4.MatButton, ɵngcc9.MatIcon], styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;height:1.5em;width:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\"], encapsulation: 2 });\r\n/** @nocollapse */\r\nNgxMatColorToggleComponent.ctorParameters = () => [\r\n    { type: ChangeDetectorRef }\r\n];\r\nNgxMatColorToggleComponent.propDecorators = {\r\n    picker: [{ type: Input, args: ['for',] }],\r\n    tabIndex: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    _button: [{ type: ViewChild, args: ['button',] }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorToggleComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-mat-color-toggle',\n                template: \"<button #button mat-icon-button type=\\\"button\\\" [attr.aria-haspopup]=\\\"picker ? 'dialog' : null\\\"\\r\\n  [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [disabled]=\\\"disabled\\\" (click)=\\\"open($event)\\\">\\r\\n  <mat-icon [style.color]=\\\"picker?._selected?.rgba\\\">palette</mat-icon>\\r\\n</button>\",\n                host: {\n                    'class': 'ngx-mat-color-toggle',\n                    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n                    // consumer may have provided, while still being able to receive focus.\n                    '[attr.tabindex]': '-1',\n                    '[class.ngx-mat-color-toggle-active]': 'picker && picker.opened',\n                    '[class.mat-accent]': 'picker && picker.color === \"accent\"',\n                    '[class.mat-warn]': 'picker && picker.color === \"warn\"',\n                    '(focus)': '_button.focus()'\n                },\n                exportAs: 'ngxMatColorPickerToggle',\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-color-toggle-default-icon{display:block;height:1.5em;width:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-color-toggle-default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-color-toggle-default-icon{margin:auto}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { disabled: [{\n            type: Input\n        }], picker: [{\n            type: Input,\n            args: ['for']\n        }], tabIndex: [{\n            type: Input\n        }], _button: [{\n            type: ViewChild,\n            args: ['button']\n        }] }); })();\r\nif (false) {\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorToggleComponent.prototype._stateChanges;\r\n    /** @type {?} */\r\n    NgxMatColorToggleComponent.prototype.picker;\r\n    /** @type {?} */\r\n    NgxMatColorToggleComponent.prototype.tabIndex;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorToggleComponent.prototype._disabled;\r\n    /** @type {?} */\r\n    NgxMatColorToggleComponent.prototype._button;\r\n    /**\r\n     * @type {?}\r\n     * @private\r\n     */\r\n    NgxMatColorToggleComponent.prototype._cd;\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/components/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/directives/numeric-color-input.directive.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NumericColorInputDirective {\r\n    constructor() { }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    onInput($event) {\r\n        this._formatInput($event.target);\r\n    }\r\n    /**\r\n     * Format input\r\n     * @private\r\n     * @param {?} input\r\n     * @return {?}\r\n     */\r\n    _formatInput(input) {\r\n        /** @type {?} */\r\n        let val = Number(input.value.replace(NUMERIC_REGEX, ''));\r\n        val = isNaN(val) ? 0 : val;\r\n        input.value = val;\r\n    }\r\n}\nNumericColorInputDirective.ɵfac = function NumericColorInputDirective_Factory(t) { return new (t || NumericColorInputDirective)(); };\nNumericColorInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumericColorInputDirective, selectors: [[\"\", \"ngxMatNumericColorInput\", \"\"]], hostBindings: function NumericColorInputDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function NumericColorInputDirective_input_HostBindingHandler($event) { return ctx.onInput($event); });\n    } } });\r\n/** @nocollapse */\r\nNumericColorInputDirective.ctorParameters = () => [];\r\nNumericColorInputDirective.propDecorators = {\r\n    onInput: [{ type: HostListener, args: ['input', ['$event'],] }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumericColorInputDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxMatNumericColorInput]'\n            }]\n    }], function () { return []; }, { \n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onInput: [{\n            type: HostListener,\n            args: ['input', ['$event']]\n        }] }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/directives/index.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: lib/color-picker.module.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxMatColorPickerModule {\r\n}\nNgxMatColorPickerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxMatColorPickerModule });\nNgxMatColorPickerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxMatColorPickerModule_Factory(t) { return new (t || NgxMatColorPickerModule)(); }, providers: [\n        ColorAdapter,\n        NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ], imports: [[\n            CommonModule,\n            MatInputModule,\n            MatButtonModule,\n            MatCardModule,\n            MatRadioModule,\n            FormsModule,\n            ReactiveFormsModule,\n            MatDialogModule,\n            PortalModule,\n            MatIconModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMatColorPickerModule, { declarations: function () { return [NgxMatColorPaletteComponent, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorSliderComponent, NumericColorInputDirective, NgxMatColorPickerContentComponent, NgxMatColorPickerComponent, NgxMatColorToggleComponent, NgxMatColorPickerInput]; }, imports: function () { return [CommonModule,\n        MatInputModule,\n        MatButtonModule,\n        MatCardModule,\n        MatRadioModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        PortalModule,\n        MatIconModule]; }, exports: function () { return [NgxMatColorToggleComponent, NgxMatColorPickerInput, NgxMatColorPickerComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatColorPickerModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    NgxMatColorPaletteComponent,\n                    NgxMatColorCanvasComponent,\n                    NgxMatColorCollectionComponent,\n                    NgxMatColorSliderComponent,\n                    NumericColorInputDirective,\n                    NgxMatColorPickerContentComponent,\n                    NgxMatColorPickerComponent,\n                    NgxMatColorToggleComponent,\n                    NgxMatColorPickerInput\n                ],\n                imports: [\n                    CommonModule,\n                    MatInputModule,\n                    MatButtonModule,\n                    MatCardModule,\n                    MatRadioModule,\n                    FormsModule,\n                    ReactiveFormsModule,\n                    MatDialogModule,\n                    PortalModule,\n                    MatIconModule\n                ],\n                exports: [\n                    NgxMatColorToggleComponent,\n                    NgxMatColorPickerInput,\n                    NgxMatColorPickerComponent\n                ],\n                entryComponents: [\n                    NgxMatColorPickerContentComponent\n                ],\n                providers: [\n                    ColorAdapter,\n                    NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n                ]\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: public-api.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * Generated from: angular-material-components-color-picker.ts\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { BASIC_COLORS, Color, ColorAdapter, MAT_COLORPICKER_VALIDATORS, MAT_COLORPICKER_VALUE_ACCESSOR, MAT_COLOR_FORMATS, MAX_RGB, MIN_RGB, NGX_MAT_COLOR_FORMATS, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, NUMERIC_REGEX, NgxMatColorCanvasComponent, NgxMatColorCollectionComponent, NgxMatColorPaletteComponent, NgxMatColorPickerComponent, NgxMatColorPickerContentComponent, NgxMatColorPickerInput, NgxMatColorPickerInputEvent, NgxMatColorPickerModule, NgxMatColorSliderComponent, NgxMatColorToggleComponent, NumericColorInputDirective, convertDecimalToHex, createMissingDateImplError, getColorAtPosition, matchers, pad2, rgbToHex, rgbaToHex, stringInputToObject, NgxMatColorPaletteComponent as ɵa, NgxMatColorCanvasComponent as ɵb, NgxMatColorCollectionComponent as ɵc, NgxMatColorSliderComponent as ɵd, NumericColorInputDirective as ɵe, NgxMatColorPickerContentComponent as ɵf, NgxMatColorPickerComponent as ɵg, NgxMatColorToggleComponent as ɵh, NgxMatColorPickerInput as ɵi, ColorAdapter as ɵj, NGX_MAT_COLOR_PICKER_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵk };\n\n//# sourceMappingURL=angular-material-components-color-picker.js.map","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {MatFormFieldControl, MatFormFieldModule} from '@angular/material/form-field';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatOptionModule, MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { MAT_COLOR_FORMATS, NgxMatColorPickerModule, NGX_MAT_COLOR_FORMATS } from '@angular-material-components/color-picker';\r\nimport { AdminComponent } from './admin/admin.component';\r\nimport { AdminRoutingModule } from './admin.routing.module';\r\nimport { SearchAccountComponent } from './search-account/search-account.component';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\n@NgModule({\r\n  declarations: [AdminComponent, SearchAccountComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    RouterModule,\r\n    MatFormFieldModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    NgSelectModule,\r\n    MatDialogModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatCheckboxModule,\r\n    MatCardModule,\r\n    MatRadioModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    NgxMatColorPickerModule,\r\n    AdminRoutingModule,\r\n    MatPaginatorModule,\r\n    MatTableModule,\r\n    MatSortModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n\r\n  providers:[\r\n    { provide: MAT_COLOR_FORMATS, useValue: NGX_MAT_COLOR_FORMATS }\r\n  ]\r\n\r\n})\r\nexport class AdminModule { }\r\n","import { animate, style, transition, trigger } from '@angular/animations';\r\nimport { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { StatusDTO } from 'src/app/shared/Models/Models';\r\nimport { StepCompletionStatusComponent } from 'src/app/shared/step-completion-status/step-completion-status.component';\r\nimport { SearchAccountService } from './search-account.service';\r\n\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'app-search-account',\r\n  templateUrl: './search-account.component.html',\r\n  styleUrls: ['./search-account.component.scss'],\r\n  animations: [\r\n    trigger('panelInOut', [\r\n      transition('void => *', [\r\n        style({ transform: 'translateY(-05%)' }),\r\n        animate(500)\r\n      ]),\r\n      transition('* => void', [\r\n        animate(500, style({ transform: 'translateY(-05%)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class SearchAccountComponent implements OnInit, AfterViewInit {\r\n  panelVisible: boolean = true;\r\n\r\n  searchForm: FormGroup;\r\n  searchResults: [] = [];\r\n\r\n  displayedColumns: string[] = ['client_acct_id', 'acct_no', 'first_name', 'last_name',  'postal_cd', 'city', 'action'];\r\n  totalData: any;\r\n  dataSource: any;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n\r\n  constructor(private dialog: MatDialog, \r\n    private searchAccountService: SearchAccountService,\r\n    private router: Router) {\r\n  }\r\n\r\n\r\n  ngAfterViewInit() {\r\n    this.callPagerAndSort();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.callPagerAndSort();\r\n    this.initForm();\r\n  }\r\n\r\n\r\n\r\n  callPagerAndSort() {\r\n    this.dataSource = new MatTableDataSource<SearchAccount>(this.searchResults);\r\n    if (this.dataSource) {\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    }\r\n  }\r\n\r\n  private initForm() {\r\n    this.searchForm = new FormGroup({\r\n      'first_name': new FormControl(\"\"),\r\n      'last_name': new FormControl(\"\"),\r\n      'client_acct_id': new FormControl(\"\"),\r\n      'user_id': new FormControl(\"\"),\r\n      'acct_no': new FormControl(\"\"),\r\n      'postal_cd': new FormControl(\"\"),\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    const searchModel = this.searchForm.value;\r\n\r\n    if (this.searchForm.valid) {\r\n      this.searchAccountService.SearchResults(searchModel).subscribe((result) => {\r\n        if (result && result.error_msg === \"OK\" && result.error_code === 0) {\r\n          this.searchResults = result.account_details_m;\r\n          if (this.searchResults.length > 0) {\r\n              this.callPagerAndSort();\r\n          }\r\n        }\r\n        else {\r\n          let statusData: StatusDTO = {\r\n            title: 'Unexpected Error occured while seaching.!',\r\n            details: result && result.error_msg.length > 0 ? result.error_msg : \"Some error occured, please try again.\",\r\n            stepSuccessful: false\r\n          }\r\n\r\n          let ref = this.dialog.open(StepCompletionStatusComponent,\r\n            { height: '48vh', width: '42vw', data: statusData });\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      return;\r\n    }\r\n\r\n  }\r\n\r\n  checkFormValidation() {\r\n    const searchModel = this.searchForm.value;\r\n    if (searchModel.first_name === '' && searchModel.last_name === '' && searchModel.client_acct_id === ''\r\n      && searchModel.user_id === '' && searchModel.acct_no === '' && searchModel.postal_cd === '') {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  togglePangel() {\r\n    this.panelVisible = !this.panelVisible;\r\n  }\r\n\r\n  onAccountViewClick(user:SearchAccount){\r\n    debugger;\r\n    localStorage.setItem(\"user_id\", user.user_id);\r\n    localStorage.setItem(\"session_id\", user.user_id);\r\n    localStorage.setItem(\"client_acct_id\", user.client_acct_id);\r\n\r\n    localStorage.setItem(\"impersonate\", 'yes'); // we have to clear this at some point\r\n\r\n    localStorage.setItem(\"first_name\", user.first_name);\r\n    localStorage.setItem(\"last_name\", user.last_name);\r\n    localStorage.setItem(\"email\", user.user_id);\r\n\r\n    this.router.navigate([\"/Login\"]);\r\n  }\r\n}\r\n\r\nexport interface SearchAccount {\r\n  first_name: string;\r\n  last_name: string;\r\n  acct_no: string;\r\n  client_acct_id: string;\r\n  postal_cd: string;\r\n  user_id: string;\r\n}","<app-header></app-header>\r\n\r\n<div class=\"main-container\">\r\n    <div class=\"card\">\r\n        <div class=\"card-header\">\r\n            <mat-icon>search</mat-icon> Search User Account\r\n\r\n            <!-- <a class=\"card-sub-header-right\" [routerLink]=\"'../billing-history'\">View Billing History</a> -->\r\n            <span class=\"expand-icons\">\r\n                <mat-icon (click)=\"this.togglePangel()\" *ngIf=\"panelVisible\">expand_less</mat-icon>\r\n                <mat-icon (click)=\"this.togglePangel()\" *ngIf=\"!panelVisible\">expand_more</mat-icon>\r\n            </span>\r\n        </div>\r\n        <div class=\"card-data-container\" *ngIf=\"panelVisible\">\r\n            <form form [formGroup]=\"searchForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"row\">\r\n                    <div class=\"full-width\">\r\n    \r\n                        <mat-form-field class=\"custom-mat-input m-field\" appearance=\"outline\">\r\n                            <input matInput placeholder=\"Email/User Id\" class=\"input-text\" formControlName=\"user_id\">\r\n                        </mat-form-field>\r\n    \r\n                        <mat-form-field class=\"custom-mat-input m-field\" appearance=\"outline\">\r\n                            <input matInput placeholder=\"Client Id\" class=\"input-text\" formControlName=\"client_acct_id\">\r\n                        </mat-form-field>\r\n    \r\n                        <mat-form-field class=\"custom-mat-input m-field\" appearance=\"outline\">\r\n                            <input matInput placeholder=\"Account No.\" class=\"input-text\" formControlName=\"acct_no\">\r\n                        </mat-form-field>\r\n    \r\n                        <mat-form-field class=\"custom-mat-input m-field\" appearance=\"outline\">\r\n                            <input matInput placeholder=\"First Name\" class=\"input-text\" formControlName=\"first_name\">\r\n                        </mat-form-field>\r\n    \r\n                        <mat-form-field class=\"custom-mat-input m-field\" appearance=\"outline\">\r\n                            <input matInput placeholder=\"Last Name\" class=\"input-text\" formControlName=\"last_name\">\r\n                        </mat-form-field>\r\n    \r\n                        <mat-form-field class=\"custom-mat-input m-field\" appearance=\"outline\">\r\n                            <input matInput placeholder=\"Post Code\" class=\"input-text\" formControlName=\"postal_cd\">\r\n                        </mat-form-field>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row center-content\">\r\n                    <div class=\"btn-container\">\r\n                        <button mat-stroked-button color=\"primary\" class=\"confirm-button\" type=\"submit\" [disabled]=\"this.checkFormValidation()\">Search</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n           \r\n           \r\n        </div>\r\n\r\n\r\n\r\n    </div>\r\n\r\n    <div class=\"card\">\r\n        <div class=\"card-header\"> Search Results\r\n\r\n            <!-- <a class=\"card-sub-header-right\" [routerLink]=\"'../billing-history'\">View Billing History</a> -->\r\n        </div>\r\n        <div class=\"mat-elevation-z8\">\r\n            <table matSort mat-table [dataSource]=\"dataSource\" matSortActive=\"fisrt_name\" matSortDirection=\"desc\" matSortDisableClear>\r\n          \r\n                <ng-container matColumnDef=\"client_acct_id\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Client Account Id </th>\r\n                    <td mat-cell *matCellDef=\"let element\" class=\"row-data\"> {{element.client_acct_id}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"acct_no\">\r\n                    <th mat-header-cell *matHeaderCellDef> Accout No# </th>\r\n                    <td mat-cell *matCellDef=\"let element\" class=\"row-data\"> {{element.acct_no}} </td>\r\n                </ng-container>\r\n\r\n              <ng-container matColumnDef=\"first_name\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>First Name </th>\r\n                <td mat-cell *matCellDef=\"let element\" class=\"row-data\"> {{element.first_name}} </td>\r\n              </ng-container>\r\n          \r\n              <ng-container matColumnDef=\"last_name\">\r\n                <th mat-header-cell *matHeaderCellDef> Last Name </th>\r\n                <td mat-cell *matCellDef=\"let element\" class=\"row-data\"> {{element.last_name}} </td>\r\n              </ng-container>\r\n\r\n                <ng-container matColumnDef=\"postal_cd\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> Postal Code </th>\r\n                    <td mat-cell *matCellDef=\"let element\" class=\"row-data\"> {{element.postal_cd}} </td>\r\n                </ng-container>\r\n\r\n                <ng-container matColumnDef=\"city\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header> City </th>\r\n                    <td mat-cell *matCellDef=\"let element\" class=\"row-data\"> {{element.city}} </td>\r\n                </ng-container>\r\n    \r\n                <!-- Action Column -->\r\n                <ng-container matColumnDef=\"action\">\r\n                    <th mat-header-cell *matHeaderCellDef> Action </th>\r\n                    <td mat-cell *matCellDef=\"let element\" class=\"action-link row-data\">\r\n                        <span class=\"viewable-accounts\" (click)=\"onAccountViewClick(element)\">View</span>\r\n                    </td>\r\n                </ng-container>\r\n          \r\n              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n            </table>\r\n          \r\n            <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" [pageSize]=\"10\" showFirstLastButtons></mat-paginator>\r\n          </div>\r\n    </div>\r\n</div>","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DataService } from '../../core/services/data.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchAccountService {\n\n  constructor(protected dataService: DataService) { }\n\n  SearchResults(data: any): Observable<any> {\n    return this.dataService.post<any>(`Admin/SearchUserAccounts`, data);\n  }\n}\n"],"sourceRoot":"webpack:///"}